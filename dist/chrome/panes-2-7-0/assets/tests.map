{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-inspector/tests/acceptance/container-test.js","ember-inspector/tests/acceptance/data-test.js","ember-inspector/tests/acceptance/deprecation-test.js","ember-inspector/tests/acceptance/info-test.js","ember-inspector/tests/acceptance/object-inspector-test.js","ember-inspector/tests/acceptance/promise-test.js","ember-inspector/tests/acceptance/render-tree-test.js","ember-inspector/tests/acceptance/route-tree-test.js","ember-inspector/tests/acceptance/view-tree-test.js","ember-inspector/tests/app.lint-test.js","ember-inspector/tests/ember_debug/container-debug-test.js","ember-inspector/tests/ember_debug/deprecation-debug-test.js","ember-inspector/tests/ember_debug/ember-debug-test.js","ember-inspector/tests/ember_debug/object-inspector-test.js","ember-inspector/tests/ember_debug/profile-manager-test.js","ember-inspector/tests/ember_debug/profile-node-test.js","ember-inspector/tests/ember_debug/promise-assembler-test.js","ember-inspector/tests/ember_debug/promise-debug-test.js","ember-inspector/tests/ember_debug/render-debug-test.js","ember-inspector/tests/ember_debug/route-debug-test.js","ember-inspector/tests/ember_debug/view-debug-test.js","ember-inspector/tests/helpers/destroy-app.js","ember-inspector/tests/helpers/module-for-acceptance.js","ember-inspector/tests/helpers/resolver.js","ember-inspector/tests/helpers/start-app.js","ember-inspector/tests/helpers/trigger-port.js","ember-inspector/tests/template-deprecations-test.js","ember-inspector/tests/test-helper.js","ember-inspector/tests/tests.lint-test.js","ember-inspector/tests/unit/build-style-test.js","ember-inspector/tests/unit/check-current-route-test.js","ember-inspector/tests/unit/ms-to-time-test.js","ember-inspector/tests/unit/resizable-columns-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-inspector/tests/acceptance/container-test', ['qunit', 'ember-qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_qunit, _emberQunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n\n  var port = void 0,\n      message = void 0,\n      name = void 0;\n\n  (0, _qunit.module)('Container Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  function getTypes() {\n    return [{\n      name: 'route',\n      count: 5\n    }, {\n      name: 'controller',\n      count: 2\n    }];\n  }\n\n  function getInstances() {\n    return [{\n      name: 'first',\n      inspectable: false\n    }, {\n      name: 'second',\n      inspectable: true\n    }];\n  }\n\n  (0, _emberQunit.test)(\"Container types are successfully listed\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var rows;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              port.reopen({\n                send: function send(name) {\n                  if (name === 'container:getTypes') {\n                    this.trigger('container:types', { types: getTypes() });\n                  }\n                }\n              });\n\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/container-types');\n\n            case 3:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-container-type');\n\n              assert.equal(rows.length, 2);\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-container-type-name', rows[0]).textContent.trim(), 'controller');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-container-type-count', rows[0]).textContent.trim(), '2');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-container-type-name', rows[1]).textContent.trim(), 'route');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-container-type-count', rows[1]).textContent.trim(), '5');\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Container instances are successfully listed\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var instances, rows;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              instances = getInstances();\n\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n                  if (name === 'container:getTypes') {\n                    this.trigger('container:types', { types: getTypes() });\n                  }\n\n                  if (name === 'container:getInstances' && message.containerType === 'controller') {\n                    this.trigger('container:instances', { instances: instances, status: 200 });\n                  }\n                }\n              });\n\n              _context2.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/container-types/controller');\n\n            case 4:\n              rows = void 0;\n\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-container-instance-list-item');\n\n              assert.equal(rows[0].textContent.trim(), 'first');\n              assert.equal(rows[1].textContent.trim(), 'second');\n              name = null;\n              message = null;\n\n              _context2.next = 12;\n              return (0, _emberNativeDomHelpers.click)(rows[0]);\n\n            case 12:\n\n              assert.equal(name, null);\n              _context2.next = 15;\n              return (0, _emberNativeDomHelpers.click)(rows[1]);\n\n            case 15:\n\n              assert.equal(name, 'objectInspector:inspectByContainerLookup');\n\n              _context2.next = 18;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-container-instance-search input', 'first');\n\n            case 18:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-container-instance-list-item');\n              assert.equal(rows.length, 1);\n              assert.equal(rows[0].textContent.trim(), 'first');\n\n            case 21:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Successfully redirects if the container type is not found\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var adapterException;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n                  if (name === 'container:getTypes') {\n                    this.trigger('container:types', { types: getTypes() });\n                  }\n\n                  if (name === 'container:getInstances' && message.containerType === 'random-type') {\n                    this.trigger('container:instances', { status: 404 });\n                  }\n                }\n              });\n              adapterException = Ember.Test.adapter.exception;\n              // Failed route causes a promise unhandled rejection\n              // even though there's an `error` action defined :(\n\n              Ember.Test.adapter.exception = function (err) {\n                if (!err || err.status !== 404) {\n                  return adapterException.call(Ember.Test.adapter, err);\n                }\n              };\n              _context3.next = 5;\n              return (0, _emberNativeDomHelpers.visit)('/container-types/random-type');\n\n            case 5:\n              assert.equal((0, _emberNativeDomHelpers.currentURL)(), '/container-types');\n              Ember.Test.adapter.exception = adapterException;\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Reload\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var types, instances;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              types = [], instances = [];\n\n\n              port.reopen({\n                send: function send(n, m) {\n                  if (n === 'container:getTypes') {\n                    this.trigger('container:types', { types: types });\n                  }\n                  if (n === 'container:getInstances' && m.containerType === 'controller') {\n                    this.trigger('container:instances', { instances: instances, status: 200 });\n                  }\n                }\n              });\n\n              _context4.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/container-types/controller');\n\n            case 4:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-container-type').length, 0);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-container-instance-list-item').length, 0);\n              types = getTypes();\n              instances = getInstances();\n\n              _context4.next = 10;\n              return (0, _emberNativeDomHelpers.click)('.js-reload-container-btn');\n\n            case 10:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-container-type').length, 2);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-container-instance-list-item').length, 2);\n\n            case 12:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/data-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var run = Ember.run;\n\n  var App = void 0;\n\n  var port = void 0,\n      name = void 0;\n\n  (0, _qunit.module)('Data Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        init: function init() {},\n        send: function send(n, m) {\n          name = n;\n          if (name === 'data:getModelTypes') {\n            this.trigger('data:modelTypesAdded', { modelTypes: modelTypes() });\n          }\n          if (name === 'data:getRecords') {\n            this.trigger('data:recordsAdded', { records: records(m.objectId) });\n          }\n          if (name === 'data:getFilters') {\n            this.trigger('data:filters', { filters: getFilters() });\n          }\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      name = null;\n      run(App, App.destroy);\n    }\n  });\n\n  function modelTypeFactory(options) {\n    return {\n      name: options.name,\n      count: options.count,\n      columns: options.columns,\n      objectId: options.name\n    };\n  }\n\n  function getFilters() {\n    return [{ name: 'isNew', desc: 'New' }];\n  }\n\n  function modelTypes() {\n    return [modelTypeFactory({\n      name: 'App.Post',\n      count: 2,\n      columns: [{ name: 'id', desc: 'Id' }, { name: 'title', desc: 'Title' }, { name: 'body', desc: 'Body' }]\n    }), modelTypeFactory({\n      name: 'App.Comment',\n      count: 1,\n      columns: [{ name: 'id', desc: 'Id' }, { name: 'title', desc: 'Title' }, { name: 'content', desc: 'Content' }]\n    })];\n  }\n\n  function recordFactory(attr, filterValues) {\n    filterValues = filterValues || { isNew: false };\n    var searchKeywords = [];\n    for (var i in attr) {\n      searchKeywords.push(attr[i]);\n    }\n    var object = Ember.Object.create();\n    return {\n      columnValues: attr,\n      objectId: attr.objectId || Ember.guidFor(object),\n      filterValues: filterValues,\n      searchKeywords: searchKeywords\n    };\n  }\n\n  function records(type) {\n    if (type === 'App.Post') {\n      return [recordFactory({ id: 1, title: 'My Post', body: 'This is my first post' }), recordFactory({ id: 2, title: 'Hello', body: '' }, { isNew: true })];\n    } else if (type === 'App.Comment') {\n      return [recordFactory({ id: 2, title: 'I am confused', content: 'I have no idea what im doing' })];\n    }\n  }\n\n  (0, _emberQunit.test)(\"Model types are successfully listed and bound\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types');\n\n            case 2:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type').length, 2);\n              // they should be sorted alphabetically\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type-name')[0].textContent.trim(), 'App.Comment');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type-name')[1].textContent.trim(), 'App.Post');\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type-count')[0].textContent.trim(), 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type-count')[1].textContent.trim(), 2);\n\n              _context.next = 9;\n              return triggerPort('data:modelTypesUpdated', {\n                modelTypes: [modelTypeFactory({ name: 'App.Post', count: 3 })]\n              });\n\n            case 9:\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-model-type-count')[1].textContent.trim(), 3);\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _emberQunit.test)(\"Records are successfully listed and bound\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var columns, recordRows, firstRow, secondRow, row, rows, lastRow;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types');\n\n            case 2:\n              _context2.next = 4;\n              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.js-model-type a')[1]);\n\n            case 4:\n              columns = (0, _emberNativeDomHelpers.findAll)('.js-header-column');\n\n              assert.equal(columns[0].textContent.trim(), 'Id');\n              assert.equal(columns[1].textContent.trim(), 'Title');\n              assert.equal(columns[2].textContent.trim(), 'Body');\n\n              recordRows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n\n              assert.equal(recordRows.length, 2);\n\n              firstRow = recordRows[0];\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', firstRow)[0].textContent.trim(), 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', firstRow)[1].textContent.trim(), 'My Post');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', firstRow)[2].textContent.trim(), 'This is my first post');\n\n              secondRow = recordRows[1];\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', secondRow)[0].textContent.trim(), 2);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', secondRow)[1].textContent.trim(), 'Hello');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', secondRow)[2].textContent.trim(), '');\n\n              _context2.next = 20;\n              return triggerPort('data:recordsAdded', {\n                records: [recordFactory({ objectId: 'new-post', id: 3, title: 'Added Post', body: 'I am new here' })]\n              });\n\n            case 20:\n              row = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item')[2];\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[0].textContent.trim(), 3);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[1].textContent.trim(), 'Added Post');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[2].textContent.trim(), 'I am new here');\n\n              _context2.next = 26;\n              return triggerPort('data:recordsUpdated', {\n                records: [recordFactory({ objectId: 'new-post', id: 3, title: 'Modified Post', body: 'I am no longer new' })]\n              });\n\n            case 26:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n\n              row = rows[rows.length - 1];\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[0].textContent.trim(), 3);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[1].textContent.trim(), 'Modified Post');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', row)[2].textContent.trim(), 'I am no longer new');\n\n              _context2.next = 33;\n              return triggerPort('data:recordsRemoved', {\n                index: 2,\n                count: 1\n              });\n\n            case 33:\n              _context2.next = 35;\n              return wait();\n\n            case 35:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-list-item').length, 2);\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n              lastRow = rows[rows.length - 1];\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', lastRow)[0].textContent.trim(), 2, \"Records successfully removed.\");\n\n            case 39:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _emberQunit.test)(\"Filtering records\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var rows, filters, newFilter;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types');\n\n            case 2:\n              _context3.next = 4;\n              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.js-model-type a')[1]);\n\n            case 4:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n\n              assert.equal(rows.length, 2);\n              filters = (0, _emberNativeDomHelpers.findAll)('.js-filter');\n\n              assert.equal(filters.length, 2);\n              newFilter = [].concat(_toConsumableArray(filters)).find(function (e) {\n                return e.textContent.indexOf('New') > -1;\n              });\n              _context3.next = 11;\n              return (0, _emberNativeDomHelpers.click)(newFilter);\n\n            case 11:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n              assert.equal(rows.length, 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', rows[0])[0].textContent.trim(), '2');\n\n            case 14:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function t(_x3) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _emberQunit.test)(\"Searching records\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var rows;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types');\n\n            case 2:\n              _context4.next = 4;\n              return (0, _emberNativeDomHelpers.click)((0, _emberNativeDomHelpers.findAll)('.js-model-type a')[1]);\n\n            case 4:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n\n              assert.equal(rows.length, 2);\n\n              _context4.next = 8;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-records-search input', 'Hello');\n\n            case 8:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n              assert.equal(rows.length, 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', rows[0])[0].textContent.trim(), '2');\n\n              _context4.next = 13;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-records-search input', 'my first post');\n\n            case 13:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n              assert.equal(rows.length, 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-record-column', rows[0])[0].textContent.trim(), '1');\n\n              _context4.next = 18;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-records-search input', '');\n\n            case 18:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-record-list-item');\n              assert.equal(rows.length, 2);\n\n            case 20:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function t(_x4) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _emberQunit.test)(\"Columns successfully updated when switching model types\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var columns;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types/App.Post/records');\n\n            case 2:\n              columns = (0, _emberNativeDomHelpers.findAll)('.js-header-column');\n\n              assert.equal(columns[columns.length - 1].textContent.trim(), 'Body');\n              _context5.next = 6;\n              return (0, _emberNativeDomHelpers.visit)('/data/model-types/App.Comment/records');\n\n            case 6:\n              columns = (0, _emberNativeDomHelpers.findAll)('.js-header-column');\n              assert.equal(columns[columns.length - 1].textContent.trim(), 'Content');\n\n            case 8:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function t(_x5) {\n      return _ref5.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/acceptance/deprecation-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n\n  var port = void 0,\n      message = void 0,\n      name = void 0;\n\n  function deprecationsWithSource() {\n    return [{\n      count: 2,\n      hasSourceMap: true,\n      sources: [{\n        stackStr: 'stack-trace',\n        map: {\n          source: 'path-to-file.js',\n          line: 1,\n          fullSource: 'http://path-to-file.js'\n        }\n      }, {\n        stackStr: 'stack-trace-2',\n        map: {\n          source: 'path-to-second-file.js',\n          line: 2,\n          fullSource: 'http://path-to-second-file.js'\n        }\n      }],\n      message: 'Deprecation 1',\n      url: 'http://www.emberjs.com'\n    }];\n  }\n\n  (0, _qunit.module)('Deprecation Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({ adapter: 'basic' });\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        send: function send(n, m) {\n          name = n;\n          message = m;\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  (0, _emberQunit.test)('No source map', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              port.reopen({\n                send: function send(name) {\n                  if (name === 'deprecation:watch') {\n                    port.trigger('deprecation:deprecationsAdded', {\n                      deprecations: [{\n                        count: 2,\n                        sources: [{\n                          stackStr: 'stack-trace',\n                          map: null\n                        }, {\n                          stackStr: 'stack-trace-2',\n                          map: null\n                        }],\n                        message: 'Deprecation 1',\n                        url: 'http://www.emberjs.com'\n                      }]\n                    });\n                  }\n                  return this._super.apply(this, arguments);\n                }\n              });\n\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/deprecations');\n\n            case 3:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-source'), 'no sources');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-deprecation-message')[0].textContent.trim(), 'Deprecation 1', 'message shown');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-deprecation-count')[0].textContent.trim(), 2, 'Count correct');\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-deprecation-full-trace'), 'Full trace button shown');\n              _context.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-full-trace-deprecations-btn');\n\n            case 9:\n\n              assert.equal(name, 'deprecation:sendStackTraces');\n              assert.equal(message.deprecation.message, 'Deprecation 1');\n              assert.equal(message.deprecation.sources.length, 2);\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"With source map, source found, can't open resource\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var sources;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              port.reopen({\n                send: function send(name) {\n                  if (name === 'deprecation:watch') {\n                    port.trigger('deprecation:deprecationsAdded', {\n                      deprecations: deprecationsWithSource()\n                    });\n                  }\n                  return this._super.apply(this, arguments);\n                }\n              });\n\n              _context2.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/deprecations');\n\n            case 3:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-message').textContent.trim(), 'Deprecation 1', 'message shown');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-count').textContent.trim(), 2, 'Count correct');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-full-trace'), 'Full trace button not shown');\n\n              sources = (0, _emberNativeDomHelpers.findAll)('.js-deprecation-source');\n\n              assert.equal(sources.length, 2, 'shows all sources');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-source-link', sources[0]), 'source not clickable');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-source-text', sources[0]).textContent.trim(), 'path-to-file.js:1');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-source-link', sources[1]), 'source not clickable');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-source-text', sources[1]).textContent.trim(), 'path-to-second-file.js:2');\n\n              _context2.next = 14;\n              return (0, _emberNativeDomHelpers.click)('.js-trace-deprecations-btn', sources[0]);\n\n            case 14:\n\n              assert.equal(name, 'deprecation:sendStackTraces');\n              assert.equal(message.deprecation.message, 'Deprecation 1');\n              assert.equal(message.deprecation.sources.length, 1);\n\n              _context2.next = 19;\n              return (0, _emberNativeDomHelpers.click)('.js-trace-deprecations-btn', sources[1]);\n\n            case 19:\n\n              assert.equal(name, 'deprecation:sendStackTraces');\n              assert.equal(message.deprecation.message, 'Deprecation 1');\n              assert.equal(message.deprecation.sources.length, 1);\n\n            case 22:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"With source map, source found, can open resource\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var openResourceArgs, sources;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              openResourceArgs = false;\n\n              port.get('adapter').reopen({\n                canOpenResource: true,\n                openResource: function openResource() {\n                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                  }\n\n                  openResourceArgs = args;\n                }\n              });\n              port.reopen({\n                send: function send(name) {\n                  if (name === 'deprecation:watch') {\n                    port.trigger('deprecation:deprecationsAdded', {\n                      deprecations: deprecationsWithSource()\n                    });\n                  }\n                  return this._super.apply(this, arguments);\n                }\n              });\n\n              _context3.next = 5;\n              return (0, _emberNativeDomHelpers.visit)('/deprecations');\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-message').textContent.trim(), 'Deprecation 1', 'message shown');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-count').textContent.trim(), 2, 'Count correct');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-full-trace'), 'Full trace button not shown');\n\n              sources = (0, _emberNativeDomHelpers.findAll)('.js-deprecation-source');\n\n              assert.equal(sources.length, 2, 'shows all sources');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-source-text', sources[0]), 'source clickable');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-source-link', sources[0]).textContent.trim(), 'path-to-file.js:1');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-deprecation-source-text', sources[1]), 'source clickable');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-deprecation-source-link', sources[1]).textContent.trim(), 'path-to-second-file.js:2');\n\n              openResourceArgs = false;\n              _context3.next = 17;\n              return (0, _emberNativeDomHelpers.click)('.js-deprecation-source-link', sources[0]);\n\n            case 17:\n\n              assert.ok(openResourceArgs);\n              openResourceArgs = false;\n\n              _context3.next = 21;\n              return (0, _emberNativeDomHelpers.click)('.js-deprecation-source-link', sources[1]);\n\n            case 21:\n\n              assert.ok(openResourceArgs);\n              openResourceArgs = false;\n\n              _context3.next = 25;\n              return (0, _emberNativeDomHelpers.click)('.js-trace-deprecations-btn', sources[0]);\n\n            case 25:\n\n              assert.equal(name, 'deprecation:sendStackTraces');\n              assert.equal(message.deprecation.message, 'Deprecation 1');\n              assert.equal(message.deprecation.sources.length, 1);\n              _context3.next = 30;\n              return (0, _emberNativeDomHelpers.click)('.js-trace-deprecations-btn', sources[1]);\n\n            case 30:\n              assert.equal(name, 'deprecation:sendStackTraces');\n              assert.equal(message.deprecation.message, 'Deprecation 1');\n              assert.equal(message.deprecation.sources.length, 1);\n\n            case 33:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/info-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n\n  var port = void 0;\n\n  (0, _qunit.module)('Info Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      App.__container__.lookup('config:main').VERSION = '9.9.9';\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        send: function send(name) {\n          if (name === 'general:getLibraries') {\n            this.trigger('general:libraries', {\n              libraries: [{ name: 'Ember', version: '1.0' }, { name: 'Handlebars', version: '2.1' }]\n            });\n          }\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  (0, _emberQunit.test)(\"Libraries are displayed correctly\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var libraries;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/info');\n\n            case 2:\n              libraries = (0, _emberNativeDomHelpers.findAll)('.js-library-row');\n\n              assert.equal(libraries.length, 3, \"The correct number of libraries is displayed\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-name', libraries[0]).textContent.trim(), 'Ember Inspector', 'Ember Inspector is added automatically');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-version', libraries[0]).textContent.trim(), '9.9.9');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-name', libraries[1]).textContent.trim(), 'Ember');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-version', libraries[1]).textContent.trim(), '1.0');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-name', libraries[2]).textContent.trim(), 'Handlebars');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-lib-version', libraries[2]).textContent.trim(), '2.1');\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/acceptance/object-inspector-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n  var port = void 0,\n      message = void 0,\n      name = void 0;\n\n  (0, _qunit.module)('Object Inspector', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        send: function send(n, m) {\n          name = n;\n          message = m;\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  var objectAttr = {\n    name: 'Object Name',\n    objectId: 1,\n    errors: [],\n    details: [{\n      name: 'Own Properties',\n      expand: true,\n      properties: [{\n        name: 'id',\n        value: 1\n      }]\n    }]\n  };\n\n  function objectFactory(props) {\n    return Object.assign({}, objectAttr, props);\n  }\n\n  function objectToInspect() {\n    return objectFactory({\n      name: 'My Object',\n      objectId: 'objectId',\n      errors: [],\n      details: [{\n        name: 'First Detail',\n        expand: false,\n        properties: [{\n          name: 'numberProperty',\n          value: {\n            inspect: 1,\n            value: 'type-number'\n          }\n        }]\n      }, {\n        name: 'Second Detail',\n        properties: [{\n          name: 'objectProperty',\n          value: {\n            inspect: 'Ember Object Name',\n            type: 'type-ember-object'\n          }\n        }, {\n          name: 'stringProperty',\n          value: {\n            inspect: 'String Value',\n            type: 'type-ember-string'\n          }\n        }]\n      }]\n    });\n  }\n\n  (0, _emberQunit.test)(\"The object displays correctly\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var obj;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              obj = objectFactory({ name: 'My Object' });\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n              _context.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-name').textContent, 'My Object');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-detail-name').textContent, 'Own Properties');\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-object-detail').classList.contains('mixin_state_expanded'), 'The \"Own Properties\" detail is expanded by default');\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Object details\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var firstDetail, secondDetail;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              firstDetail = void 0, secondDetail = void 0;\n              _context2.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n              _context2.next = 5;\n              return triggerPort('objectInspector:updateObject', objectToInspect());\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-name').textContent, 'My Object');\n              firstDetail = (0, _emberNativeDomHelpers.findAll)('.js-object-detail')[0];\n              secondDetail = (0, _emberNativeDomHelpers.findAll)('.js-object-detail')[1];\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-detail-name', firstDetail).textContent, 'First Detail');\n              assert.notOk(firstDetail.classList.contains('mixin_state_expanded'), 'Detail not expanded by default');\n\n              _context2.next = 12;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name', firstDetail);\n\n            case 12:\n\n              assert.ok(firstDetail.classList.contains('mixin_state_expanded'), 'Detail expands on click.');\n              assert.notOk(secondDetail.classList.contains('mixin_state_expanded'), 'Second detail does not expand.');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property', firstDetail).length, 1);\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-name', firstDetail).textContent, 'numberProperty');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-value', firstDetail).textContent, '1');\n\n              _context2.next = 19;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name', firstDetail);\n\n            case 19:\n\n              assert.notOk(firstDetail.classList.contains('mixin_state_expanded'), 'Expanded detail minimizes on click.');\n              _context2.next = 22;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name', secondDetail);\n\n            case 22:\n\n              assert.ok(secondDetail.classList.contains('mixin_state_expanded'));\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property', secondDetail).length, 2);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property-name', secondDetail)[0].textContent, 'objectProperty');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property-value', secondDetail)[0].textContent, 'Ember Object Name');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property-name', secondDetail)[1].textContent, 'stringProperty');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-property-value', secondDetail)[1].textContent, 'String Value');\n\n            case 28:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Digging deeper into objects\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var secondDetail, nestedObject;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              secondDetail = void 0;\n              _context3.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n\n              triggerPort('objectInspector:updateObject', objectToInspect());\n\n              secondDetail = (0, _emberNativeDomHelpers.findAll)('.js-object-detail')[1];\n              _context3.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name', secondDetail);\n\n            case 7:\n              _context3.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-object-property .js-object-property-value');\n\n            case 9:\n\n              assert.equal(name, 'objectInspector:digDeeper');\n              assert.deepEqual(message, { objectId: 'objectId', property: 'objectProperty' });\n\n              nestedObject = {\n                parentObject: 'objectId',\n                name: 'Nested Object',\n                objectId: 'nestedObject',\n                property: 'objectProperty',\n                details: [{\n                  name: 'Nested Detail',\n                  properties: [{\n                    name: 'nestedProp',\n                    value: {\n                      inspect: 'Nested Prop',\n                      type: 'type-string'\n                    }\n                  }]\n                }]\n              };\n              _context3.next = 14;\n              return triggerPort('objectInspector:updateObject', nestedObject);\n\n            case 14:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-name').textContent, 'My Object', 'Title stays as the initial object.');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-trail').textContent, '.objectProperty', 'Nested property shows below title');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-detail-name').textContent, 'Nested Detail');\n              _context3.next = 19;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name');\n\n            case 19:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-object-detail').classList.contains('mixin_state_expanded'));\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-name').textContent, 'nestedProp');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-value').textContent, 'Nested Prop');\n              _context3.next = 24;\n              return (0, _emberNativeDomHelpers.click)('.js-object-inspector-back');\n\n            case 24:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-object-trail'), 0);\n\n            case 25:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Computed properties\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var obj;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'myObject',\n                details: [{\n                  name: 'Detail',\n                  properties: [{\n                    name: 'computedProp',\n                    value: {\n                      inspect: '<computed>',\n                      type: 'type-descriptor',\n                      computed: true\n                    }\n                  }]\n                }]\n              };\n              _context4.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n              _context4.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name');\n\n            case 7:\n              _context4.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-calculate');\n\n            case 9:\n\n              assert.equal(name, 'objectInspector:calculate');\n              assert.deepEqual(message, { objectId: 'myObject', property: 'computedProp', mixinIndex: 0 });\n              _context4.next = 13;\n              return triggerPort('objectInspector:updateProperty', {\n                objectId: 'myObject',\n                property: 'computedProp',\n                value: {\n                  inspect: 'Computed value'\n                },\n                mixinIndex: 0\n              });\n\n            case 13:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-value').textContent, 'Computed value');\n\n            case 14:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Properties are bound to the application properties\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var obj, txtField;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'object-id',\n                details: [{\n                  name: 'Own Properties',\n                  expand: true,\n                  properties: [{\n                    name: 'boundProp',\n                    value: {\n                      inspect: 'Teddy',\n                      type: 'type-string',\n                      computed: false\n                    }\n                  }]\n\n                }]\n              };\n              _context5.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-value').textContent, 'Teddy');\n              _context5.next = 8;\n              return triggerPort('objectInspector:updateProperty', {\n                objectId: 'object-id',\n                mixinIndex: 0,\n                property: 'boundProp',\n                value: {\n                  inspect: 'Alex',\n                  type: 'type-string',\n                  computed: false\n                }\n              });\n\n            case 8:\n              _context5.next = 10;\n              return (0, _emberNativeDomHelpers.click)('.js-object-property-value');\n\n            case 10:\n              txtField = (0, _emberNativeDomHelpers.find)('.js-object-property-value-txt');\n\n              assert.equal(txtField.value, '\"Alex\"');\n              _context5.next = 14;\n              return (0, _emberNativeDomHelpers.fillIn)(txtField, '\"Joey\"');\n\n            case 14:\n              _context5.next = 16;\n              return (0, _emberNativeDomHelpers.keyEvent)('.js-object-property-value-txt', 'keyup', 13);\n\n            case 16:\n              assert.equal(name, 'objectInspector:saveProperty');\n              assert.equal(message.property, 'boundProp');\n              assert.equal(message.value, 'Joey');\n              assert.equal(message.mixinIndex, 0);\n\n              _context5.next = 22;\n              return triggerPort('objectInspector:updateProperty', {\n                objectId: 'object-id',\n                mixinIndex: 0,\n                property: 'boundProp',\n                value: {\n                  inspect: 'Joey',\n                  type: 'type-string',\n                  computed: false\n                }\n              });\n\n            case 22:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-property-value').textContent, 'Joey');\n\n            case 23:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Stringified json should not get double parsed\", function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      var obj, txtField;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'object-id',\n                details: [{\n                  name: 'Own Properties',\n                  expand: true,\n                  properties: [{\n                    name: 'boundProp',\n                    value: {\n                      inspect: '{\"name\":\"teddy\"}',\n                      type: 'type-string',\n                      computed: false\n                    }\n                  }]\n\n                }]\n              };\n              _context6.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n              _context6.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-object-property-value');\n\n            case 7:\n              txtField = (0, _emberNativeDomHelpers.find)('.js-object-property-value-txt');\n\n              assert.equal(txtField.value, '\"{\"name\":\"teddy\"}\"');\n              _context6.next = 11;\n              return (0, _emberNativeDomHelpers.fillIn)(txtField, '\"{\"name\":\"joey\"}\"');\n\n            case 11:\n              _context6.next = 13;\n              return (0, _emberNativeDomHelpers.keyEvent)('.js-object-property-value-txt', 'keyup', 13);\n\n            case 13:\n              assert.equal(name, 'objectInspector:saveProperty');\n              assert.equal(message.property, 'boundProp');\n              assert.equal(message.value, '{\"name\":\"joey\"}');\n              assert.equal(message.mixinIndex, 0);\n\n            case 17:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Send to console\", function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n      var obj;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'object-id',\n                details: [{\n                  name: 'Own Properties',\n                  expand: true,\n                  properties: [{\n                    name: 'myProp',\n                    value: {\n                      inspect: 'Teddy',\n                      type: 'type-string',\n                      computed: false\n                    }\n                  }]\n\n                }]\n              };\n              _context7.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n              _context7.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-send-to-console-btn');\n\n            case 7:\n\n              assert.equal(name, 'objectInspector:sendToConsole');\n              assert.equal(message.objectId, 'object-id');\n              assert.equal(message.property, 'myProp');\n\n              _context7.next = 12;\n              return (0, _emberNativeDomHelpers.click)('.js-send-object-to-console-btn');\n\n            case 12:\n\n              assert.equal(name, 'objectInspector:sendToConsole');\n              assert.equal(message.objectId, 'object-id');\n              assert.equal(message.property, undefined);\n\n            case 15:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Read only CPs cannot be edited\", function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n      var obj, valueElements;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'object-id',\n                details: [{\n                  name: 'Own Properties',\n                  expand: true,\n                  properties: [{\n                    name: 'readCP',\n                    readOnly: true,\n                    value: {\n                      computed: true,\n                      inspect: 'Read',\n                      type: 'type-string'\n                    }\n                  }, {\n                    name: 'readCP',\n                    readOnly: false,\n                    value: {\n                      computed: true,\n                      inspect: 'Write',\n                      type: 'type-string'\n                    }\n                  }]\n                }]\n              };\n              _context8.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n              _context8.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-object-property-value');\n\n            case 7:\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-object-property-value-txt'));\n\n              valueElements = (0, _emberNativeDomHelpers.findAll)('.js-object-property-value');\n              _context8.next = 11;\n              return (0, _emberNativeDomHelpers.click)(valueElements[valueElements.length - 1]);\n\n            case 11:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-object-property-value-txt'));\n\n            case 12:\n            case 'end':\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    return function (_x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Dropping an object due to destruction\", function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n      var obj;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              obj = {\n                name: 'My Object',\n                objectId: 'myObject',\n                details: [{\n                  name: 'Detail',\n                  properties: []\n                }]\n              };\n              _context9.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-name').textContent.trim(), 'My Object');\n              _context9.next = 8;\n              return triggerPort('objectInspector:droppedObject', { objectId: 'myObject' });\n\n            case 8:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-object-name'));\n\n            case 9:\n            case 'end':\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    return function (_x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Date fields are editable\", function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n      var date, obj, field, newDate;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 2:\n              date = new Date();\n              obj = {\n                name: 'My Object',\n                objectId: 'myObject',\n                details: [{\n                  name: 'First Detail',\n                  expand: false,\n                  properties: [{\n                    name: 'dateProperty',\n                    value: {\n                      inspect: date.toString(),\n                      type: 'type-date'\n                    }\n                  }]\n                }]\n              };\n              _context10.next = 6;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 6:\n              assert.ok(true);\n\n              _context10.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-object-detail-name');\n\n            case 9:\n              _context10.next = 11;\n              return (0, _emberNativeDomHelpers.click)('.js-object-property-value');\n\n            case 11:\n              field = (0, _emberNativeDomHelpers.find)('.js-object-property-value-date');\n\n              assert.ok(field);\n              _context10.next = 15;\n              return (0, _emberNativeDomHelpers.fillIn)(field, '2015-01-01');\n\n            case 15:\n\n              assert.equal(name, 'objectInspector:saveProperty');\n              assert.equal(message.property, 'dateProperty');\n              assert.equal(message.dataType, 'date');\n\n              newDate = new Date(message.value);\n\n              assert.equal(newDate.getMonth(), 0);\n              assert.equal(newDate.getDate(), 1);\n              assert.equal(newDate.getFullYear(), 2015);\n\n            case 22:\n            case 'end':\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    return function (_x10) {\n      return _ref10.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Errors are correctly displayed\", function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n      var obj;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              obj = objectFactory({\n                name: 'My Object',\n                objectId: '1',\n                errors: [{ property: 'foo' }, { property: 'bar' }]\n              });\n              _context11.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n              _context11.next = 5;\n              return triggerPort('objectInspector:updateObject', obj);\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-object-name').textContent, 'My Object');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-inspector-errors').length, 1);\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-object-inspector-error').length, 2);\n\n              _context11.next = 10;\n              return (0, _emberNativeDomHelpers.click)('.js-send-errors-to-console');\n\n            case 10:\n\n              assert.equal(name, 'objectInspector:traceErrors');\n              assert.equal(message.objectId, '1');\n\n              _context11.next = 14;\n              return triggerPort('objectInspector:updateErrors', {\n                objectId: '1',\n                errors: [{ property: 'foo' }]\n              });\n\n            case 14:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-object-inspector-error'));\n\n              _context11.next = 17;\n              return triggerPort('objectInspector:updateErrors', {\n                objectId: '1',\n                errors: []\n              });\n\n            case 17:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-object-inspector-errors'));\n\n            case 18:\n            case 'end':\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    return function (_x11) {\n      return _ref11.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/promise-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n  var port = void 0,\n      message = void 0,\n      name = void 0;\n\n  (0, _qunit.module)('Promise Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        send: function send(n, m) {\n          if (n === 'promise:getAndObservePromises') {\n            port.trigger('promise:promisesUpdated', {\n              promises: []\n            });\n          }\n          name = n;\n          message = m;\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  var guids = 0;\n  function generatePromise(props) {\n    return Object.assign({\n      guid: ++guids,\n      label: 'Generated Promise',\n      parent: null,\n      children: null,\n      state: 'created',\n      value: null,\n      reason: null,\n      createdAt: Date.now(),\n      hasStack: false\n    }, props);\n  }\n\n  (0, _emberQunit.test)(\"Shows page refresh hint if no promises\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: []\n              });\n\n            case 4:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-promise-tree'), \"no promise list\");\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-page-refresh'), \"page refresh hint seen\");\n\n              _context.next = 8;\n              return (0, _emberNativeDomHelpers.click)('.js-page-refresh-btn');\n\n            case 8:\n\n              assert.equal(name, 'general:refresh');\n\n              _context.next = 11;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  label: 'Promise 1',\n                  state: 'created'\n                })]\n              });\n\n            case 11:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-promise-tree'), 'promise tree is seen after being populated');\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item').length, 1, '1 promise item can be seen');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-page-refresh'), 'page refresh hint hidden');\n\n              // make sure clearing does not show the refresh hint\n              _context.next = 16;\n              return (0, _emberNativeDomHelpers.click)('.js-clear-promises-btn');\n\n            case 16:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-promise-tree'), 'promise-tree can be seen');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-promise-tree-item'), 'promise items cleared');\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-page-refresh'), 'page refresh hint hidden');\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Pending promise\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var row;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context2.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  label: 'Promise 1',\n                  state: 'created'\n                })]\n              });\n\n            case 4:\n              _context2.next = 6;\n              return wait();\n\n            case 6:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item').length, 1);\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-label', row).textContent.trim(), 'Promise 1');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-state', row).textContent.trim(), 'Pending');\n\n            case 10:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Fulfilled promise\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var now, row;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              now = Date.now();\n\n\n              triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  label: 'Promise 1',\n                  state: 'fulfilled',\n                  value: {\n                    inspect: 'value',\n                    type: 'type-string'\n                  },\n                  createdAt: now,\n                  settledAt: now + 10\n                })]\n              });\n              _context3.next = 6;\n              return wait();\n\n            case 6:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item').length, 1);\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-label', row).textContent.trim(), 'Promise 1');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-state', row).textContent.trim(), 'Fulfilled');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-value', row).textContent.trim(), 'value');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-time', row).textContent.trim(), '10.00ms');\n\n            case 12:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Rejected promise\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var now, row;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              now = Date.now();\n              _context4.next = 5;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  label: 'Promise 1',\n                  state: 'rejected',\n                  reason: {\n                    inspect: 'reason',\n                    type: 'type-string'\n                  },\n                  createdAt: now,\n                  settledAt: now + 20\n                })]\n              });\n\n            case 5:\n\n              assert.equal((0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item').length, 1);\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-label', row).textContent.trim(), 'Promise 1');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-state', row).textContent.trim(), 'Rejected');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-value', row).textContent.trim(), 'reason');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-time', row).textContent.trim(), '20.00ms');\n\n            case 11:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Chained promises\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var rows;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context5.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 2,\n                  parent: 1,\n                  label: 'Child'\n                }), generatePromise({\n                  guid: 1,\n                  children: [2],\n                  label: 'Parent'\n                })]\n              });\n\n            case 4:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item');\n\n              assert.equal(rows.length, 1, 'Collpased by default');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-label', rows[0]).textContent.trim(), 'Parent');\n              _context5.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-promise-label', rows[0]);\n\n            case 9:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-promise-tree-item');\n              assert.equal(rows.length, 2, 'Chain now expanded');\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-promise-label', rows[1]).textContent.trim(), 'Child');\n\n            case 12:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Can trace promise when there is a stack\", function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context6.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({ guid: 1, hasStack: true })]\n              });\n\n            case 4:\n              _context6.next = 6;\n              return (0, _emberNativeDomHelpers.click)('.js-trace-promise-btn');\n\n            case 6:\n\n              assert.equal(name, 'promise:tracePromise');\n              assert.deepEqual(message, { promiseId: 1 });\n\n            case 8:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Trace button hidden if promise has no stack\", function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context7.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({ guid: 1, hasStack: false })]\n              });\n\n            case 4:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-trace-promise-btn'));\n\n            case 5:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Toggling promise trace option\", function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {\n      var input;\n      return regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              assert.expect(3);\n\n              _context8.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 3:\n              input = (0, _emberNativeDomHelpers.find)('.js-with-stack input');\n\n              assert.notOk(input.checked, 'should not be checked by default');\n              _context8.next = 7;\n              return (0, _emberNativeDomHelpers.click)(input);\n\n            case 7:\n\n              assert.equal(name, 'promise:setInstrumentWithStack');\n              assert.equal(message.instrumentWithStack, true);\n\n            case 9:\n            case 'end':\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    return function (_x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Logging error stack trace in the console\", function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {\n      var row;\n      return regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context9.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  state: 'rejected',\n                  reason: {\n                    inspect: 'some error',\n                    type: 'type-error'\n                  }\n                })]\n              });\n\n            case 4:\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-send-to-console-btn').textContent.trim(), 'Stack trace');\n              _context9.next = 8;\n              return (0, _emberNativeDomHelpers.click)('.js-send-to-console-btn', row);\n\n            case 8:\n\n              assert.equal(name, 'promise:sendValueToConsole');\n              assert.deepEqual(message, { promiseId: 1 });\n\n            case 10:\n            case 'end':\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    return function (_x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Send fulfillment value to console\", function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {\n      var row;\n      return regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context10.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  state: 'fulfilled',\n                  value: {\n                    inspect: 'some string',\n                    type: 'type-string'\n                  }\n                })]\n              });\n\n            case 4:\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n              _context10.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-send-to-console-btn', row);\n\n            case 7:\n\n              assert.equal(name, 'promise:sendValueToConsole');\n              assert.deepEqual(message, { promiseId: 1 });\n\n            case 9:\n            case 'end':\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    return function (_x10) {\n      return _ref10.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Sending objects to the object inspector\", function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {\n      var row;\n      return regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/promise-tree');\n\n            case 2:\n              _context11.next = 4;\n              return triggerPort('promise:promisesUpdated', {\n                promises: [generatePromise({\n                  guid: 1,\n                  state: 'fulfilled',\n                  value: {\n                    inspect: 'Some Object',\n                    type: 'type-ember-object',\n                    objectId: 100\n                  }\n                })]\n              });\n\n            case 4:\n              row = (0, _emberNativeDomHelpers.find)('.js-promise-tree-item');\n              _context11.next = 7;\n              return (0, _emberNativeDomHelpers.click)('.js-promise-object-value', row);\n\n            case 7:\n\n              assert.equal(name, 'objectInspector:inspectById');\n              assert.deepEqual(message, { objectId: 100 });\n\n            case 9:\n            case 'end':\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    return function (_x11) {\n      return _ref11.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/render-tree-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n\n  var port = void 0;\n\n  (0, _qunit.module)('Render Tree Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n      port.reopen({\n        send: function send() /*n, m*/{}\n      });\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  function generateProfiles() {\n    return [{\n      name: 'First View Rendering',\n      duration: 476.87,\n      timestamp: new Date(2014, 5, 1, 13, 16, 22, 715).getTime(),\n      children: [{\n        name: 'Child view',\n        duration: 0.36,\n        timestamp: new Date(2014, 5, 1, 13, 16, 22, 581).getTime(),\n        children: []\n      }]\n    }, {\n      name: \"Second View Rendering\",\n      duration: 10,\n      timestamp: new Date(2014, 5, 1, 13, 16, 22, 759).getTime(),\n      children: []\n    }];\n  }\n\n  (0, _emberQunit.test)(\"No profiles collected\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              port.reopen({\n                send: function send(n /*, m*/) {\n                  if (n === 'render:watchProfiles') {\n                    this.trigger('render:profilesAdded', {\n                      profiles: []\n                    });\n                  }\n                }\n              });\n\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/render-tree');\n\n            case 3:\n\n              assert.notOk((0, _emberNativeDomHelpers.find)('.js-render-tree'), \"no render tree\");\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-render-tree-empty'), \"Message about empty render tree shown\");\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Renders the list correctly\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var rows;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              port.reopen({\n                send: function send(n /*, m*/) {\n                  if (n === 'render:watchProfiles') {\n                    this.trigger('render:profilesAdded', {\n                      profiles: generateProfiles()\n                    });\n                  }\n                }\n              });\n\n              _context2.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/render-tree');\n\n            case 3:\n\n              assert.ok((0, _emberNativeDomHelpers.find)('.js-render-tree'));\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n\n              assert.equal(rows.length, 2, \"Two rows are rendered initially\");\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[0]).textContent.trim(), \"First View Rendering\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-duration', rows[0]).textContent.trim(), \"476.87ms\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-timestamp', rows[0]).textContent.trim(), \"13:16:22:715\");\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[1]).textContent.trim(), \"Second View Rendering\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-duration', rows[1]).textContent.trim(), \"10.00ms\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-timestamp', rows[1]).textContent.trim(), \"13:16:22:759\");\n\n              _context2.next = 14;\n              return (0, _emberNativeDomHelpers.click)('.js-render-main-cell', rows[0]);\n\n            case 14:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n              assert.equal(rows.length, 3, \"Child is shown below the parent\");\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[1]).textContent.trim(), \"Child view\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-duration', rows[1]).textContent.trim(), \"0.36ms\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-timestamp', rows[1]).textContent.trim(), \"13:16:22:581\");\n\n              _context2.next = 21;\n              return (0, _emberNativeDomHelpers.click)('.js-render-main-cell', rows[0]);\n\n            case 21:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n              assert.equal(rows.length, 2, \"Child is hidden when parent collapses\");\n\n            case 23:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Searching the profiles\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var rows;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              port.reopen({\n                send: function send(n /*, m*/) {\n                  if (n === 'render:watchProfiles') {\n                    this.trigger('render:profilesAdded', {\n                      profiles: generateProfiles()\n                    });\n                  }\n                }\n              });\n\n              _context3.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/render-tree');\n\n            case 3:\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n\n              assert.equal(rows.length, 2, \"Two rows are rendered initially\");\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[0]).textContent.trim(), \"First View Rendering\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[1]).textContent.trim(), \"Second View Rendering\");\n\n              _context3.next = 9;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-render-profiles-search input', 'first');\n\n            case 9:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n              assert.equal(rows.length, 2, \"The first parent is rendered with the child\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[0]).textContent.trim(), \"First View Rendering\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[1]).textContent.trim(), \"Child view\");\n\n              // Minimize to hide child view\n              _context3.next = 15;\n              return (0, _emberNativeDomHelpers.click)('.js-render-main-cell');\n\n            case 15:\n              _context3.next = 17;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-render-profiles-search input', '');\n\n            case 17:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n              assert.equal(rows.length, 2, \"filter is reset\");\n\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[0]).textContent.trim(), \"First View Rendering\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[1]).textContent.trim(), \"Second View Rendering\");\n\n              _context3.next = 23;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-render-profiles-search input', 'Second');\n\n            case 23:\n\n              rows = (0, _emberNativeDomHelpers.findAll)('.js-render-profile-item');\n              assert.equal(rows.length, 1, \"The second row is the only one showing\");\n              assert.equal((0, _emberNativeDomHelpers.find)('.js-render-profile-name', rows[0]).textContent.trim(), \"Second View Rendering\");\n\n            case 26:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/route-tree-test', ['exports', 'ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (exports, _emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isObject = isObject;\n  exports.deepAssign = deepAssign;\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  var App = void 0;\n  var run = Ember.run;\n\n\n  var port = void 0;\n\n  (0, _qunit.module)('Route Tree Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n    },\n    afterEach: function afterEach() {\n      run(App, App.destroy);\n    }\n  });\n\n  function isObject(item) {\n    return item && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !Array.isArray(item);\n  }\n\n  function deepAssign(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    if (!sources.length) return target;\n    var source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n      for (var key in source) {\n        if (isObject(source[key])) {\n          if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));\n          deepAssign(target[key], source[key]);\n        } else {\n          Object.assign(target, _defineProperty({}, key, source[key]));\n        }\n      }\n    }\n\n    return deepAssign.apply(undefined, [target].concat(sources));\n  }\n\n  function routeValue(name, props) {\n    var value = {\n      name: name,\n      controller: {\n        name: name,\n        className: name.replace(/\\./g, '_').classify() + 'Controller',\n        exists: true\n      },\n      routeHandler: {\n        name: name,\n        className: name.replace(/\\./g, '_').classify() + 'Route'\n      },\n      template: {\n        name: name.replace(/\\./g, '/')\n      }\n    };\n    props = props || {};\n    return deepAssign({}, value, props);\n  }\n\n  var routeTree = {\n    value: routeValue('application'),\n    children: [{\n      value: routeValue('post', { controller: { exists: false } }),\n      children: [{\n        value: routeValue('post.new', { url: 'post/new' }),\n        children: []\n      }, {\n        value: routeValue('post.edit', { url: 'post/edit' }),\n        children: []\n      }]\n    }]\n  };\n\n  (0, _emberQunit.test)(\"Route tree is successfully displayed\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var routeNodes, routeNames, routeHandlers, controllers, templates, titleTips;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              port.reopen({\n                send: function send(name /*, message*/) {\n                  if (name === 'route:getTree') {\n                    this.trigger('route:routeTree', { tree: routeTree });\n                  }\n                }\n              });\n\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('route-tree');\n\n            case 3:\n              routeNodes = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item');\n\n              assert.equal(routeNodes.length, 4);\n\n              routeNames = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('.js-route-name'))).map(function (item) {\n                return item.textContent.trim();\n              });\n\n              assert.deepEqual(routeNames, ['application', 'post', 'post.new', 'post.edit']);\n\n              routeHandlers = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('.js-route-handler'))).map(function (item) {\n                return item.textContent.trim();\n              });\n\n              assert.deepEqual(routeHandlers, ['ApplicationRoute', 'PostRoute', 'PostNewRoute', 'PostEditRoute']);\n\n              controllers = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('.js-route-controller'))).map(function (item) {\n                return item.textContent.trim();\n              });\n\n\n              assert.deepEqual(controllers, ['ApplicationController', 'PostController', 'PostNewController', 'PostEditController']);\n\n              templates = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('.js-route-template'))).map(function (item) {\n                return item.textContent.trim();\n              });\n\n\n              assert.deepEqual(templates, ['application', 'post', 'post/new', 'post/edit']);\n\n              titleTips = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('span[title]', routeNodes))).map(function (n) {\n                return n.getAttribute('title');\n              }).sort();\n\n\n              assert.deepEqual(titleTips, [\"ApplicationController\", \"ApplicationRoute\", \"PostController\", \"PostEditController\", \"PostEditRoute\", \"PostNewController\", \"PostNewRoute\", \"PostRoute\", \"application\", \"application\", \"post\", \"post\", \"post.edit\", \"post.new\", \"post/edit\", \"post/edit\", \"post/new\", \"post/new\"], 'expected title tips');\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Clicking on route handlers and controller sends an inspection message\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var name, message, applicationRow, postRow;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              name = void 0, message = void 0, applicationRow = void 0;\n\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n\n                  if (name === 'route:getTree') {\n                    this.trigger('route:routeTree', { tree: routeTree });\n                  }\n                }\n              });\n\n              _context2.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('route-tree');\n\n            case 4:\n              name = null;\n              message = null;\n              applicationRow = (0, _emberNativeDomHelpers.find)('.js-route-tree-item');\n              _context2.next = 9;\n              return (0, _emberNativeDomHelpers.click)('.js-route-handler', applicationRow);\n\n            case 9:\n              assert.equal(name, 'objectInspector:inspectRoute');\n              assert.equal(message.name, 'application');\n\n              name = null;\n              message = null;\n              _context2.next = 15;\n              return (0, _emberNativeDomHelpers.click)('.js-route-controller', applicationRow);\n\n            case 15:\n              assert.equal(name, 'objectInspector:inspectController');\n              assert.equal(message.name, 'application');\n\n              name = null;\n              message = null;\n              postRow = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item')[1];\n              _context2.next = 22;\n              return (0, _emberNativeDomHelpers.click)('.js-route-controller', postRow);\n\n            case 22:\n              assert.equal(name, null, \"If controller does not exist, clicking should have no effect.\");\n              assert.equal(message, null);\n\n            case 24:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Current Route is highlighted\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var routeNodes, isCurrent;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              port.reopen({\n                send: function send(name /*, message*/) {\n                  if (name === 'route:getTree') {\n                    this.trigger('route:routeTree', { tree: routeTree });\n                  } else if (name === 'route:getCurrentRoute') {\n                    this.trigger('route:currentRoute', { name: 'post.edit' });\n                  }\n                }\n              });\n\n              routeNodes = void 0;\n              _context3.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('route-tree');\n\n            case 4:\n              routeNodes = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item .js-route-name');\n              isCurrent = [].concat(_toConsumableArray(routeNodes)).map(function (item) {\n                return item.classList.contains('list__cell_highlight');\n              });\n\n              assert.deepEqual(isCurrent, [true, true, false, true]);\n\n              run(function () {\n                return port.trigger('route:currentRoute', { name: 'post.new' });\n              });\n              _context3.next = 10;\n              return wait();\n\n            case 10:\n              routeNodes = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item .js-route-name');\n              isCurrent = [].concat(_toConsumableArray(routeNodes)).map(function (item) {\n                return item.classList.contains('list__cell_highlight');\n              });\n              assert.deepEqual(isCurrent, [true, true, true, false], 'Current route is bound');\n\n            case 13:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Hiding non current route\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var routeNodes, checkbox;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              port.reopen({\n                send: function send(name /*, message*/) {\n                  if (name === 'route:getTree') {\n                    this.trigger('route:routeTree', { tree: routeTree });\n                  } else if (name === 'route:getCurrentRoute') {\n                    this.trigger('route:currentRoute', { name: 'post.edit' });\n                  }\n                }\n              });\n\n              _context4.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('route-tree');\n\n            case 3:\n              routeNodes = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item');\n\n              assert.equal(routeNodes.length, 4);\n              checkbox = (0, _emberNativeDomHelpers.find)('.js-filter-hide-routes input');\n\n              checkbox.checked = true;\n              _context4.next = 9;\n              return (0, _emberNativeDomHelpers.triggerEvent)(checkbox, 'change');\n\n            case 9:\n              routeNodes = (0, _emberNativeDomHelpers.findAll)('.js-route-tree-item');\n              assert.equal(routeNodes.length, 3);\n\n            case 11:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/acceptance/view-tree-test', ['ember-qunit', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-native-dom-helpers'], function (_emberQunit, _qunit, _startApp, _emberNativeDomHelpers) {\n  'use strict';\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var App = void 0;\n  var run = Ember.run;\n\n\n  var port = void 0;\n\n  (0, _qunit.module)('View Tree Tab', {\n    beforeEach: function beforeEach() {\n      App = (0, _startApp.default)({\n        adapter: 'basic'\n      });\n      port = App.__container__.lookup('port:main');\n    },\n    afterEach: function afterEach() {\n      Ember.run(App, App.destroy);\n    }\n  });\n\n  function textFor(selector, context) {\n    return (0, _emberNativeDomHelpers.find)(selector, context).textContent.trim();\n  }\n\n  var treeId = 0;\n  function viewNodeFactory(props) {\n    if (!props.template) {\n      props.template = props.name;\n    }\n    var obj = {\n      value: props,\n      children: [],\n      treeId: ++treeId\n    };\n    return obj;\n  }\n\n  function viewTreeFactory(tree) {\n    var children = tree.children;\n    delete tree.children;\n    var viewNode = viewNodeFactory(tree);\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        viewNode.children.push(viewTreeFactory(children[i]));\n      }\n    }\n    return viewNode;\n  }\n\n  function defaultViewTree() {\n    return viewTreeFactory({\n      name: 'application',\n      isVirtual: false,\n      isComponent: false,\n      objectId: 'applicationView',\n      viewClass: 'App.ApplicationView',\n      completeViewClass: 'App.ApplicationView',\n      duration: 10,\n      controller: {\n        name: 'App.ApplicationController',\n        completeName: 'App.ApplicationController',\n        objectId: 'applicationController'\n      },\n      children: [{\n        name: 'posts',\n        isVirtual: false,\n        isComponent: false,\n        viewClass: 'App.PostsView',\n        completeViewClass: 'App.PostsView',\n        duration: 1,\n        objectId: 'postsView',\n        model: {\n          name: 'PostsArray',\n          completeName: 'PostsArray',\n          objectId: 'postsArray',\n          type: 'type-ember-object'\n        },\n        controller: {\n          name: 'App.PostsController',\n          completeName: 'App.PostsController',\n          objectId: 'postsController'\n        },\n        children: []\n      }, {\n        name: 'comments',\n        isVirtual: false,\n        isComponent: false,\n        viewClass: 'App.CommentsView',\n        completeViewClass: 'App.CommentsView',\n        duration: 2.5,\n        objectId: 'commentsView',\n        model: {\n          name: 'CommentsArray',\n          completeName: 'CommentsArray',\n          objectId: 'commentsArray',\n          type: 'type-ember-object'\n        },\n        controller: {\n          name: 'App.CommentsController',\n          completeName: 'App.CommentsController',\n          objectId: 'commentsController'\n        },\n        children: []\n      }]\n    });\n  }\n\n  (0, _emberQunit.test)(\"It should correctly display the view tree\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var viewTree, treeNodes, controllerNames, templateNames, modelNames, viewClassNames, durations, titleTips;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              viewTree = defaultViewTree();\n              _context.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n              run(function () {\n                port.trigger('view:viewTree', { tree: viewTree });\n              });\n              _context.next = 6;\n              return wait();\n\n            case 6:\n              treeNodes = (0, _emberNativeDomHelpers.findAll)('.js-view-tree-item');\n\n              assert.equal(treeNodes.length, 3, 'expected some tree nodes');\n\n              controllerNames = [];\n              templateNames = [];\n              modelNames = [];\n              viewClassNames = [];\n              durations = [];\n\n\n              [].concat(_toConsumableArray(treeNodes)).forEach(function (node) {\n                templateNames.push(textFor('.js-view-template', node));\n                controllerNames.push(textFor('.js-view-controller', node));\n                viewClassNames.push(textFor('.js-view-class', node));\n                modelNames.push(textFor('.js-view-model', node));\n                durations.push(textFor('.js-view-duration', node));\n              });\n\n              assert.deepEqual(controllerNames, ['App.ApplicationController', 'App.PostsController', 'App.CommentsController'], 'expected controller names');\n\n              assert.deepEqual(templateNames, ['application', 'posts', 'comments'], 'expected template names');\n\n              assert.deepEqual(modelNames, ['--', 'PostsArray', 'CommentsArray'], 'expected model names');\n\n              assert.deepEqual(viewClassNames, ['App.ApplicationView', 'App.PostsView', 'App.CommentsView'], 'expected view class names');\n\n              assert.deepEqual(durations, ['10.00ms', '1.00ms', '2.50ms'], 'expected render durations');\n\n              titleTips = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('span[title]'))).map(function (node) {\n                return node.getAttribute('title');\n              }).sort();\n\n\n              assert.deepEqual(titleTips, ['App.ApplicationController', 'App.ApplicationView', 'App.CommentsController', 'App.CommentsView', 'App.PostsController', 'App.PostsView', 'CommentsArray', 'PostsArray', 'application', 'application', 'comments', 'comments', 'posts', 'posts'], 'expected title tips');\n\n            case 21:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"It should filter the view tree using the search text\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var viewTree, treeNodes, controllerNames, templateNames, modelNames, viewClassNames, durations, titleTips;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              viewTree = defaultViewTree();\n              _context2.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 3:\n              run(function () {\n                port.trigger('view:viewTree', { tree: viewTree });\n              });\n              _context2.next = 6;\n              return wait();\n\n            case 6:\n              treeNodes = (0, _emberNativeDomHelpers.findAll)('.js-view-tree-item');\n\n              assert.equal(treeNodes.length, 3, 'expected some tree nodes');\n\n              _context2.next = 10;\n              return (0, _emberNativeDomHelpers.fillIn)('.js-filter-views input', 'post');\n\n            case 10:\n              treeNodes = (0, _emberNativeDomHelpers.findAll)('.js-view-tree-item');\n              assert.equal(treeNodes.length, 1, 'expected filtered tree nodes');\n\n              controllerNames = [];\n              templateNames = [];\n              modelNames = [];\n              viewClassNames = [];\n              durations = [];\n\n\n              [].concat(_toConsumableArray(treeNodes)).forEach(function (node) {\n                templateNames.push(textFor('.js-view-template', node));\n                controllerNames.push(textFor('.js-view-controller', node));\n                viewClassNames.push(textFor('.js-view-class', node));\n                modelNames.push(textFor('.js-view-model', node));\n                durations.push(textFor('.js-view-duration', node));\n              });\n\n              assert.deepEqual(controllerNames, ['App.PostsController'], 'expected controller names');\n\n              assert.deepEqual(templateNames, ['posts'], 'expected template names');\n\n              assert.deepEqual(modelNames, ['PostsArray'], 'expected model names');\n\n              assert.deepEqual(viewClassNames, ['App.PostsView'], 'expected view class names');\n\n              assert.deepEqual(durations, ['1.00ms'], 'expected render durations');\n\n              titleTips = [].concat(_toConsumableArray((0, _emberNativeDomHelpers.findAll)('span[title]'))).map(function (node) {\n                return node.getAttribute('title');\n              }).sort();\n\n\n              assert.deepEqual(titleTips, ['App.PostsController', 'App.PostsView', 'PostsArray', 'posts', 'posts'], 'expected title tips');\n\n            case 25:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"It should update the view tree when the port triggers a change\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var treeNodes, viewTree, viewControllersEls;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              assert.expect(4);\n              treeNodes = void 0, viewTree = defaultViewTree();\n              _context3.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              run(function () {\n                return port.trigger('view:viewTree', { tree: viewTree });\n              });\n              _context3.next = 7;\n              return wait();\n\n            case 7:\n\n              treeNodes = (0, _emberNativeDomHelpers.findAll)('.js-view-tree-item');\n              assert.equal(treeNodes.length, 3);\n              viewControllersEls = (0, _emberNativeDomHelpers.findAll)('.js-view-controller');\n\n              assert.equal(viewControllersEls[viewControllersEls.length - 1].textContent.trim(), 'App.CommentsController');\n\n              viewTree = defaultViewTree();\n              viewTree.children.splice(0, 1);\n              viewTree.children[0].value.controller.name = 'App.SomeController';\n              run(function () {\n                return port.trigger('view:viewTree', { tree: viewTree });\n              });\n              _context3.next = 17;\n              return wait();\n\n            case 17:\n              treeNodes = (0, _emberNativeDomHelpers.findAll)('.js-view-tree-item');\n              assert.equal(treeNodes.length, 2);\n              viewControllersEls = (0, _emberNativeDomHelpers.findAll)('.js-view-controller');\n              assert.equal(viewControllersEls[viewControllersEls.length - 1].textContent.trim(), 'App.SomeController');\n\n            case 21:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Previewing / showing a view on the client\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var messageSent, viewTree;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              messageSent = null;\n\n              port.reopen({\n                send: function send(name, message) {\n                  messageSent = { name: name, message: message };\n                }\n              });\n\n              _context4.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              viewTree = defaultViewTree();\n\n              viewTree.children = [];\n              run(function () {\n                return port.trigger('view:viewTree', { tree: viewTree });\n              });\n              _context4.next = 9;\n              return wait();\n\n            case 9:\n              _context4.next = 11;\n              return (0, _emberNativeDomHelpers.triggerEvent)('.js-view-tree-item', 'mouseover');\n\n            case 11:\n              assert.equal(messageSent.name, 'view:previewLayer', \"Client asked to preview layer\");\n              assert.equal(messageSent.message.objectId, 'applicationView', \"Client sent correct id to preview layer\");\n              _context4.next = 15;\n              return (0, _emberNativeDomHelpers.triggerEvent)('.js-view-tree-item', 'mouseout');\n\n            case 15:\n              assert.equal(messageSent.name, 'view:hidePreview', \"Client asked to hide preview\");\n\n            case 16:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Inspecting views on hover\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var messageSent;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              messageSent = null;\n\n              port.reopen({\n                send: function send(name, message) {\n                  messageSent = { name: name, message: message };\n                }\n              });\n\n              _context5.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              _context5.next = 6;\n              return (0, _emberNativeDomHelpers.click)('.js-inspect-views');\n\n            case 6:\n              assert.equal(messageSent.name, 'view:inspectViews');\n              assert.deepEqual(messageSent.message, { inspect: true });\n              run(function () {\n                return port.trigger('view:startInspecting');\n              });\n              _context5.next = 11;\n              return wait();\n\n            case 11:\n              _context5.next = 13;\n              return (0, _emberNativeDomHelpers.click)('.js-inspect-views');\n\n            case 13:\n              assert.equal(messageSent.name, 'view:inspectViews');\n              assert.deepEqual(messageSent.message, { inspect: false });\n\n            case 15:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Configuring which views to show\", function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      var messageSent;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              messageSent = null;\n\n              port.reopen({\n                send: function send(name, message) {\n                  messageSent = { name: name, message: message };\n                }\n              });\n\n              _context6.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              _context6.next = 6;\n              return (0, _emberNativeDomHelpers.click)('.js-filter-components input');\n\n            case 6:\n              assert.equal(messageSent.name, 'view:setOptions');\n              assert.deepEqual(messageSent.message.options, { components: true });\n              assert.equal(messageSent.name, 'view:setOptions');\n              assert.deepEqual(messageSent.message.options, { components: true });\n\n            case 10:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)(\"Inspecting a model\", function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n      var messageSent, tree, model;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              messageSent = null;\n\n              port.reopen({\n                send: function send(name, message) {\n                  messageSent = { name: name, message: message };\n                }\n              });\n\n              _context7.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n              tree = defaultViewTree();\n\n              run(function () {\n                port.trigger('view:viewTree', { tree: tree });\n              });\n              _context7.next = 8;\n              return wait();\n\n            case 8:\n              model = (0, _emberNativeDomHelpers.find)('.js-view-model-clickable');\n              _context7.next = 11;\n              return (0, _emberNativeDomHelpers.click)(model);\n\n            case 11:\n              assert.equal(messageSent.name, 'objectInspector:inspectById');\n              assert.equal(messageSent.message.objectId, 'postsArray');\n\n            case 13:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/basic.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/basic.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/bookmarklet.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/bookmarklet.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/chrome.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/chrome.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/firefox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/firefox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/web-extension.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/web-extension.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/websocket.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/websocket.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/action-checkbox.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/action-checkbox.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/clear-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/clear-button.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/container-instance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/container-instance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/date-property-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-property-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/deprecation-item-source.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/deprecation-item-source.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/deprecation-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/deprecation-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/drag-handle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/drag-handle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/draggable-column.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/draggable-column.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/icon-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/icon-button.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/iframe-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/iframe-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/main-content.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/main-content.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/mixin-detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mixin-detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/mixin-details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mixin-details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/mixin-property.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/mixin-property.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/object-inspector.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/object-inspector.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/promise-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/promise-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/property-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/property-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/record-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/record-filter.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/record-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/record-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/reload-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/reload-button.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/render-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/render-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/resizable-column.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/resizable-column.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/route-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/route-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/send-to-console.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/send-to-console.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sidebar-toggle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sidebar-toggle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/view-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/view-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-list-cell.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-list-cell.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-list-content.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-list-content.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('computed/debounce.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'computed/debounce.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/container-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/container-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/container-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/container-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/deprecations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/deprecations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/info.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/info.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/model-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/model-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/promise-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/promise-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/records.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/records.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/render-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/render-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/route-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/route-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/view-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/view-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/build-style.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/build-style.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/escape-url.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/escape-url.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/ms-to-time.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/ms-to-time.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/one-way.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/one-way.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/schema-for.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/schema-for.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('libs/promise-assembler.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'libs/promise-assembler.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('libs/resizable-columns.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'libs/resizable-columns.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/row-events.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/row-events.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/promise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/promise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('port.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'port.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/app-detected.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/app-detected.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/container-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/container-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/container-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/container-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/container-types/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/container-types/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/data/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/data/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/deprecations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/deprecations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/info.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/info.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/model-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/model-type.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/model-types.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/model-types.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/promise-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/promise-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/records.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/records.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/render-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/render-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/route-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/route-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/tab.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tab.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/view-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/view-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('schemas/info-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'schemas/info-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('schemas/promise-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'schemas/promise-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('schemas/render-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'schemas/render-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('schemas/route-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'schemas/route-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('schemas/view-tree.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'schemas/view-tree.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/layout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/layout.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/storage/local.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/storage/local.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/storage/memory.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/storage/memory.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/check-current-route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/check-current-route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/compare-arrays.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/compare-arrays.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/escape-reg-exp.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/escape-reg-exp.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/search-match.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/search-match.js should pass ESLint\\n\\n');\n  });\n});","define('ember-inspector/tests/ember_debug/container-debug-test', ['qunit', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var run = Ember.run,\n      emberA = Ember.A,\n      Application = Ember.Application;\n\n  var EmberDebug = void 0;\n  var port = void 0,\n      name = void 0,\n      message = void 0;\n  var App = void 0;\n\n  function setupApp() {\n    App = Application.create();\n    App.setupForTesting();\n    App.injectTestHelpers();\n\n    App.Router.map(function () {\n      this.route('simple');\n    });\n  }\n\n  (0, _qunit.module)(\"Container Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug = (0, _require2.default)('ember-debug/main').default;\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send(n, m) {\n          name = n;\n          message = m;\n        }\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      run(EmberDebug, 'start');\n      port = EmberDebug.port;\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"#getTypes\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var types;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 2:\n\n              port.trigger('container:getTypes');\n              _context.next = 5;\n              return wait();\n\n            case 5:\n\n              assert.equal(name, 'container:types');\n              types = emberA(message.types);\n\n              assert.ok(types.findBy('name', 'controller'));\n              assert.ok(types.findBy('name', 'route'));\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"#getInstances\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var instances;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 2:\n\n              port.trigger('container:getInstances', { containerType: 'controller' });\n              _context2.next = 5;\n              return wait();\n\n            case 5:\n\n              assert.equal(name, 'container:instances');\n              instances = emberA(message.instances);\n\n              assert.ok(instances.findBy('name', 'simple'));\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"#getInstances on a non existing type\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 2:\n\n              port.trigger('container:getInstances', { containerType: 'not-here' });\n              _context3.next = 5;\n              return wait();\n\n            case 5:\n\n              assert.equal(name, 'container:instances');\n              assert.equal(message.status, 404);\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function t(_x3) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/ember_debug/deprecation-debug-test', ['qunit', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP,\n      run = Ember.run;\n\n  var EmberDebug = (0, _require2.default)(\"ember-debug/main\").default;\n\n  var port = void 0;\n  var App = void 0;\n\n  function setupApp() {\n    App = Ember.Application.create();\n    App.injectTestHelpers();\n    App.setupForTesting();\n  }\n\n  (0, _qunit.module)(\"Deprecation Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send() /*n, m*/{}\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      run(EmberDebug, 'start');\n      port = EmberDebug.port;\n      EmberDebug.IGNORE_DEPRECATIONS = true;\n      EmberDebug.deprecationDebug.reopen({\n        fetchSourceMap: function fetchSourceMap() {\n          return RSVP.resolve(null);\n        },\n\n        emberCliConfig: null\n      });\n    },\n    afterEach: function afterEach() {\n      EmberDebug.destroyContainer();\n      Ember.run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"deprecations are caught and sent\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var messages, deprecations, deprecation, count;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              messages = [];\n\n              port.reopen({\n                send: function send(name, message) {\n                  messages.push({ name: name, message: message });\n                }\n              });\n\n              App.ApplicationRoute = Ember.Route.extend({\n                setupController: function setupController() {\n                  EmberDebug.IGNORE_DEPRECATIONS = false;\n                  Ember.deprecate('Deprecation 1');\n                  Ember.deprecate('Deprecation 2', false, { url: 'http://www.emberjs.com' });\n                  Ember.deprecate('Deprecation 1');\n                  EmberDebug.IGNORE_DEPRECATIONS = true;\n                }\n              });\n\n              run(port, 'trigger', 'deprecation:watch');\n              _context.next = 6;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 6:\n              deprecations = messages.filterBy('name', 'deprecation:deprecationsAdded').get('lastObject').message.deprecations;\n\n              assert.equal(deprecations.length, 2);\n              deprecation = deprecations[0];\n\n              assert.equal(deprecation.count, 2, 'Correctly combined');\n              assert.equal(deprecation.message, 'Deprecation 1');\n              assert.equal(deprecation.sources.length, 2, 'Correctly separated by source');\n              deprecation = deprecations[1];\n              assert.equal(deprecation.count, 1);\n              assert.equal(deprecation.message, 'Deprecation 2');\n              assert.equal(deprecation.sources.length, 1);\n              assert.equal(deprecation.url, 'http://www.emberjs.com');\n\n              count = messages.filterBy('name', 'deprecation:count').get('lastObject').message.count;\n\n              assert.equal(count, 3, 'count correctly sent');\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)('Warns once about deprecations', function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var count;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              assert.expect(2);\n              count = 0;\n\n              run(port, 'trigger', 'deprecation:watch');\n              port.get('adapter').reopen({\n                warn: function warn(message) {\n                  assert.equal(message, 'Deprecations were detected, see the Ember Inspector deprecations tab for more details.');\n                  assert.equal(++count, 1, 'Warns once');\n                }\n              });\n              App.ApplicationRoute = Ember.Route.extend({\n                setupController: function setupController() {\n                  EmberDebug.IGNORE_DEPRECATIONS = false;\n                  Ember.deprecate('Deprecation 1');\n                  Ember.deprecate('Deprecation 2');\n                  EmberDebug.IGNORE_DEPRECATIONS = true;\n                }\n              });\n              _context2.next = 7;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 7:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/ember_debug/ember-debug-test', ['qunit', 'require'], function (_qunit, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var name = void 0;\n  /* eslint no-empty:0 */\n\n\n  var EmberDebug = void 0;\n  var port = void 0,\n      adapter = void 0;\n  var run = Ember.run,\n      Application = Ember.Application,\n      EmberObject = Ember.Object;\n\n  var App = void 0;\n  var EmberInspector = void 0;\n\n  function setupApp() {\n    App = Application.create();\n    App.setupForTesting();\n    App.injectTestHelpers();\n  }\n\n  (0, _qunit.module)(\"Ember Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug = (0, _require2.default)('ember-debug/main').default;\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send(n /*, m*/) {\n          name = n;\n        }\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      run(EmberDebug, 'start');\n      EmberInspector = EmberDebug;\n      port = EmberDebug.port;\n      adapter = EmberDebug.get('port.adapter');\n    },\n    afterEach: function afterEach() {\n      name = null;\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n    }\n  });\n\n  function cantSend(obj, assert) {\n    try {\n      EmberInspector.inspect(obj);\n      assert.ok(false);\n    } catch (e) {}\n  }\n\n  (0, _qunit.test)(\"EmberInspector#inspect sends inspectable objects\", function (assert) {\n    var obj = EmberObject.create();\n    EmberInspector.inspect(obj);\n    assert.equal(name, \"objectInspector:updateObject\");\n    name = null;\n    obj = [];\n    EmberInspector.inspect(obj);\n    assert.equal(name, \"objectInspector:updateObject\");\n    cantSend(1, assert);\n    cantSend({}, assert);\n    cantSend(\"a\", assert);\n    cantSend(null, assert);\n  });\n\n  (0, _qunit.test)(\"Errors are caught and handled by EmberDebug\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var error, handleError;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              assert.expect(1);\n              error = new Error('test error');\n\n              port.on('test:errors', function () {\n                throw error;\n              });\n\n              handleError = adapter.handleError;\n\n              adapter.reopen({\n                handleError: function handleError(e) {\n                  assert.equal(e, error, 'Error handled');\n                }\n              });\n\n              port.messageReceived('test:errors', {});\n\n              _context.next = 8;\n              return wait();\n\n            case 8:\n              adapter.reopen({ handleError: handleError });\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/ember_debug/object-inspector-test', ['qunit', 'ember-new-computed', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNewComputed, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var EmberDebug = void 0;\n  var port = void 0,\n      name = void 0,\n      message = void 0;\n  var App = void 0;\n  var objectInspector = void 0;\n\n  var run = Ember.run,\n      guidFor = Ember.guidFor,\n      EmberObject = Ember.Object;\n\n\n  function setupApp() {\n    App = Ember.Application.create();\n    App.setupForTesting();\n    App.injectTestHelpers();\n\n    App.Router.map(function () {\n      this.route('simple');\n    });\n\n    App.XSimpleComponent = Ember.Component;\n\n    Ember.TEMPLATES.simple = Ember.HTMLBars.template({\n      \"id\": \"M/cd2+sO\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"Simple \\\"],[1,[33,[\\\"input\\\"],null,[[\\\"class\\\"],[\\\"simple-input\\\"]]],false],[0,\\\" \\\"],[1,[33,[\\\"x-simple\\\"],null,[[\\\"class\\\"],[\\\"simple-view\\\"]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    });\n  }\n\n  var ignoreErrors = true;\n  var defaultRootForFinder = void 0;\n  (0, _qunit.module)(\"Ember Debug - Object Inspector\", {\n    // eslint-disable-next-line object-shorthand\n    beforeEach: function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                EmberDebug = (0, _require2.default)('ember-debug/main').default;\n                EmberDebug.Port = EmberDebug.Port.extend({\n                  init: function init() {},\n                  send: function send(n, m) {\n                    if (ignoreErrors && n.match(/[Ee]rror/)) {\n                      return;\n                    }\n                    name = n;\n                    message = m;\n                  }\n                });\n                run(function () {\n                  setupApp();\n                  EmberDebug.set('application', App);\n                });\n                run(EmberDebug, 'start');\n                _context.next = 6;\n                return wait();\n\n              case 6:\n                objectInspector = EmberDebug.get('objectInspector');\n                port = EmberDebug.port;\n                defaultRootForFinder = _emberNativeDomHelpers.settings.rootElement;\n                _emberNativeDomHelpers.settings.rootElement = 'body';\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function beforeEach() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return beforeEach;\n    }(),\n    afterEach: function afterEach() {\n      _emberNativeDomHelpers.settings.rootElement = defaultRootForFinder;\n      name = null;\n      message = null;\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"An Ember Object is correctly transformed into an inspection hash\", function (assert) {\n    var date = new Date();\n\n    var Parent = Ember.Object.extend({\n      id: null,\n      name: 'My Object'\n    });\n\n    Parent.reopenClass({\n      toString: function toString() {\n        return 'Parent Object';\n      }\n    });\n\n    var inspected = Parent.create({\n      id: 1,\n      toString: function toString() {\n        return 'Object:' + this.get('name');\n      },\n\n      nullVal: null,\n      dateVal: date\n    });\n\n    objectInspector.sendObject(inspected);\n\n    assert.equal(name, 'objectInspector:updateObject');\n\n    assert.equal(message.name, 'Object:My Object');\n\n    var firstDetail = message.details[0];\n    assert.equal(firstDetail.name, 'Own Properties');\n\n    assert.equal(firstDetail.properties.length, 3, 'methods are not included');\n\n    var idProperty = firstDetail.properties[0];\n    assert.equal(idProperty.name, 'id');\n    assert.equal(idProperty.value.type, 'type-number');\n    assert.equal(idProperty.value.inspect, '1');\n\n    var nullProperty = firstDetail.properties[1];\n    assert.equal(nullProperty.name, 'nullVal');\n    assert.equal(nullProperty.value.type, 'type-null');\n    assert.equal(nullProperty.value.inspect, 'null');\n\n    var prop = firstDetail.properties[2];\n    assert.equal(prop.name, 'dateVal');\n    assert.equal(prop.value.type, 'type-date');\n    assert.equal(prop.value.inspect, date.toString());\n\n    var secondDetail = message.details[1];\n    assert.equal(secondDetail.name, 'Parent Object');\n\n    idProperty = secondDetail.properties[0];\n    assert.equal(idProperty.name, 'id');\n    assert.equal(idProperty.overridden, 'Own Properties');\n\n    var nameProperty = secondDetail.properties[1];\n    assert.equal(nameProperty.name, 'name');\n    assert.equal(nameProperty.value.inspect, 'My Object');\n  });\n\n  (0, _qunit.test)(\"Computed properties are correctly calculated\", function (assert) {\n    var inspected = Ember.Object.extend({\n      hi: (0, _emberNewComputed.default)(function () {\n        return 'Hello';\n      }).property(),\n      _debugInfo: function _debugInfo() {\n        return {\n          propertyInfo: {\n            expensiveProperties: ['hi']\n          }\n        };\n      }\n    }).create();\n\n    objectInspector.sendObject(inspected);\n\n    var computedProperty = message.details[1].properties[0];\n\n    assert.equal(computedProperty.name, 'hi');\n    assert.ok(computedProperty.value.computed);\n    assert.equal(computedProperty.value.type, 'type-descriptor');\n    assert.equal(computedProperty.value.inspect, '<computed>');\n\n    var id = message.objectId;\n\n    port.trigger('objectInspector:calculate', {\n      objectId: id,\n      property: 'hi',\n      mixinIndex: 1\n    });\n\n    assert.equal(name, 'objectInspector:updateProperty');\n    assert.equal(message.objectId, id);\n    assert.equal(message.property, 'hi');\n    assert.equal(message.mixinIndex, 1);\n    assert.equal(message.value.type, 'type-string');\n    assert.equal(message.value.inspect, 'Hello');\n    assert.ok(message.value.computed);\n  });\n\n  (0, _qunit.test)(\"Cached Computed properties are pre-calculated\", function (assert) {\n    var inspected = Ember.Object.extend({\n      hi: (0, _emberNewComputed.default)(function () {\n        return 'Hello';\n      }).property()\n    }).create();\n\n    // pre-calculate CP\n    inspected.get('hi');\n\n    objectInspector.sendObject(inspected);\n\n    var computedProperty = message.details[1].properties[0];\n\n    assert.equal(computedProperty.name, 'hi');\n    assert.ok(computedProperty.value.computed);\n    assert.equal(computedProperty.value.type, 'type-string');\n    assert.equal(computedProperty.value.inspect, 'Hello');\n  });\n\n  (0, _qunit.test)(\"Properties are correctly bound\", function (assert) {\n    var inspected = Ember.Object.extend({\n      name: 'Teddy',\n\n      hi: (0, _emberNewComputed.default)({\n        get: function get() {\n          return 'hello';\n        },\n        set: function set(key, val) {\n          return val;\n        }\n      }),\n\n      _debugInfo: function _debugInfo() {\n        return {\n          propertyInfo: {\n            expensiveProperties: ['hi']\n          }\n        };\n      }\n    }).create();\n\n    objectInspector.sendObject(inspected);\n\n    var id = message.objectId;\n\n    inspected.set('name', 'Alex');\n\n    assert.equal(name, 'objectInspector:updateProperty');\n\n    assert.equal(message.objectId, id);\n    assert.equal(message.property, 'name');\n    assert.equal(message.mixinIndex, 1);\n    assert.equal(message.value.computed, false);\n    assert.equal(message.value.inspect, 'Alex');\n    assert.equal(message.value.type, 'type-string');\n\n    // un-cached computed properties are not bound until calculated\n\n    message = null;\n\n    inspected.set('hi', 'Hey');\n\n    assert.equal(message, null, 'Computed properties are not bound as long as they haven\\'t been calculated');\n\n    port.trigger('objectInspector:calculate', {\n      objectId: id,\n      property: 'hi',\n      mixinIndex: 1\n    });\n\n    message = null;\n    inspected.set('hi', 'Hello!');\n\n    assert.equal(message.objectId, id);\n    assert.equal(message.property, 'hi');\n    assert.equal(message.mixinIndex, 1);\n    assert.ok(message.value.computed);\n    assert.equal(message.value.inspect, 'Hello!');\n    assert.equal(message.value.type, 'type-string');\n  });\n\n  (0, _qunit.test)(\"Properties can be updated through a port message\", function (assert) {\n    var inspected = Ember.Object.extend({\n      name: 'Teddy'\n    }).create();\n\n    objectInspector.sendObject(inspected);\n\n    var id = message.objectId;\n\n    port.trigger('objectInspector:saveProperty', {\n      objectId: id,\n      mixinIndex: 1,\n      property: 'name',\n      value: 'Alex'\n    });\n\n    assert.equal(inspected.get('name'), 'Alex');\n\n    // A property updated message is published\n    assert.equal(name, 'objectInspector:updateProperty');\n    assert.equal(message.property, 'name');\n    assert.equal(message.value.inspect, 'Alex');\n    assert.equal(message.value.type, 'type-string');\n  });\n\n  (0, _qunit.test)(\"Date properties are converted to dates before being updated\", function (assert) {\n    var newDate = new Date(2015, 0, 1);\n\n    var inspected = Ember.Object.extend({\n      date: null\n    }).create();\n\n    objectInspector.sendObject(inspected);\n\n    var id = message.objectId;\n\n    port.trigger('objectInspector:saveProperty', {\n      objectId: id,\n      mixinIndex: 1,\n      property: 'date',\n      value: newDate.getTime(),\n      dataType: 'date'\n    });\n\n    assert.equal(inspected.get('date').getFullYear(), 2015);\n    assert.equal(inspected.get('date').getMonth(), 0);\n    assert.equal(inspected.get('date').getDate(), 1);\n  });\n\n  (0, _qunit.test)(\"Property grouping can be customized using _debugInfo\", function (assert) {\n    var mixinToSkip = Ember.Mixin.create({});\n    mixinToSkip[Ember.NAME_KEY] = 'MixinToSkip';\n\n    var Inspected = Ember.Object.extend(mixinToSkip, {\n      name: 'Teddy',\n      gender: 'Male',\n      hasChildren: false,\n      expensiveProperty: (0, _emberNewComputed.default)(function () {\n        return '';\n      }).property(),\n      _debugInfo: function _debugInfo() {\n        return {\n          propertyInfo: {\n            includeOtherProperties: true,\n            skipProperties: ['propertyToSkip'],\n            skipMixins: ['MixinToSkip'],\n            expensiveProperties: ['expensiveProperty'],\n            groups: [{\n              name: 'Basic Info',\n              properties: ['name', 'gender'],\n              expand: true\n            }, {\n              name: 'Family Info',\n              properties: ['maritalStatus']\n            }]\n          }\n        };\n      }\n    });\n\n    Inspected.toString = function () {\n      return 'TestObject';\n    };\n\n    var inspected = Inspected.create({\n      maritalStatus: 'Single',\n      propertyToSkip: null\n    });\n\n    objectInspector.sendObject(inspected);\n\n    assert.equal(message.details[0].name, 'Basic Info');\n    assert.equal(message.details[0].properties[0].name, 'name');\n    assert.equal(message.details[0].properties[1].name, 'gender');\n    assert.ok(message.details[0].expand);\n\n    assert.equal(message.details[1].name, 'Family Info');\n    assert.equal(message.details[1].properties[0].name, 'maritalStatus');\n\n    assert.equal(message.details[2].name, 'Own Properties');\n    assert.equal(message.details[2].properties.length, 0, \"Correctly skips properties\");\n\n    assert.equal(message.details[3].name, 'TestObject');\n    assert.equal(message.details[3].properties.length, 2, \"Does not duplicate properties\");\n    assert.equal(message.details[3].properties[0].name, 'hasChildren');\n    assert.equal(message.details[3].properties[1].value.type, 'type-descriptor', \"Does not calculate expensive properties\");\n\n    assert.ok(message.details[4].name !== 'MixinToSkip', \"Correctly skips properties\");\n  });\n\n  (0, _qunit.test)(\"Read Only Computed properties mush have a readOnly property\", function (assert) {\n    var inspected = Ember.Object.extend({\n      readCP: (0, _emberNewComputed.default)(function () {}).property().readOnly(),\n      writeCP: (0, _emberNewComputed.default)(function () {}).property()\n    }).create();\n\n    objectInspector.sendObject(inspected);\n\n    var properties = message.details[1].properties;\n\n    assert.ok(properties[0].readOnly);\n    assert.ok(!properties[1].readOnly);\n  });\n\n  (0, _qunit.test)(\"Views are correctly handled when destroyed during transitions\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var objectId, view;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              objectId = null;\n              _context2.next = 3;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 3:\n\n              objectId = (0, _emberNativeDomHelpers.find)('.simple-view').id;\n              view = App.__container__.lookup('-view-registry:main')[objectId];\n\n              objectInspector.sendObject(view);\n              _context2.next = 8;\n              return wait();\n\n            case 8:\n\n              assert.ok(!!objectInspector.sentObjects[objectId], \"Object successfully retained.\");\n\n              _context2.next = 11;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 11:\n\n              assert.ok(true, \"No exceptions thrown\");\n\n            case 12:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)(\"Objects are dropped on destruction\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var didDestroy, object, objectId;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              didDestroy = false;\n              object = Ember.Object.create({\n                willDestroy: function willDestroy() {\n                  didDestroy = true;\n                }\n              });\n              objectId = guidFor(object);\n              _context3.next = 5;\n              return wait();\n\n            case 5:\n\n              objectInspector.sendObject(object);\n              _context3.next = 8;\n              return wait();\n\n            case 8:\n\n              assert.ok(!!objectInspector.sentObjects[objectId]);\n              Ember.run(object, 'destroy');\n              _context3.next = 12;\n              return wait();\n\n            case 12:\n\n              assert.ok(didDestroy, 'Original willDestroy is preserved.');\n              assert.ok(!objectInspector.sentObjects[objectId], 'Object is dropped');\n              assert.equal(name, 'objectInspector:droppedObject');\n              assert.deepEqual(message, { objectId: objectId });\n\n            case 16:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)(\"Properties ending with `Binding` are skipped\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var object, props;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              object = Ember.Object.create({\n                bar: 'test',\n                fooBinding: 'bar'\n              });\n              _context4.next = 3;\n              return wait();\n\n            case 3:\n\n              objectInspector.sendObject(object);\n              _context4.next = 6;\n              return wait();\n\n            case 6:\n              props = message.details[0].properties;\n\n              assert.equal(props.length, 2, \"Props should be foo and bar without fooBinding\");\n              assert.equal(props[0].name, 'bar');\n              assert.equal(props[1].name, 'foo');\n\n            case 10:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)(\"Properties listed in _debugInfo but don't exist should be skipped silently\", function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var object, props;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              object = Ember.Object.create({\n                foo: 'test',\n                _debugInfo: function _debugInfo() {\n                  return {\n                    propertyInfo: {\n                      groups: [{\n                        name: 'Attributes', properties: ['foo', 'bar']\n                      }]\n                    }\n                  };\n                }\n              });\n              _context5.next = 3;\n              return wait();\n\n            case 3:\n\n              run(objectInspector, 'sendObject', object);\n              _context5.next = 6;\n              return wait();\n\n            case 6:\n              props = message.details[0].properties;\n\n              assert.equal(props.length, 1, \"bar should be silently skipped\");\n              assert.equal(props[0].name, 'foo');\n\n            case 9:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function (_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)(\"Errors while computing CPs are handled\", function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      var count, object, errors;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              // catch error port messages (ignored by default)\n              ignoreErrors = false;\n\n              count = 0;\n              object = void 0;\n\n              run(function () {\n                object = EmberObject.extend({\n                  foo: (0, _emberNewComputed.default)(function () {\n                    if (count++ < 2) {\n                      throw new Error('CP Calculation');\n                    }\n                    return 'bar';\n                  })\n                }).create();\n              });\n\n              run(objectInspector, 'sendObject', object);\n              _context6.next = 7;\n              return wait();\n\n            case 7:\n              errors = message.errors;\n\n              assert.equal(errors.length, 1);\n              assert.equal(errors[0].property, 'foo');\n              ignoreErrors = false;\n\n              // Calculate CP a second time\n              run(function () {\n                port.trigger('objectInspector:calculate', {\n                  objectId: guidFor(object),\n                  property: 'foo',\n                  mixinIndex: 1\n                });\n              });\n              _context6.next = 14;\n              return wait();\n\n            case 14:\n              ignoreErrors = true;\n              assert.equal(name, 'objectInspector:updateErrors');\n              assert.equal(errors.length, 1);\n              assert.equal(errors[0].property, 'foo');\n\n              // Calculate CP a third time (no error this time)\n              run(function () {\n                port.trigger('objectInspector:calculate', {\n                  objectId: guidFor(object),\n                  property: 'foo',\n                  mixinIndex: 1\n                });\n              });\n              _context6.next = 21;\n              return wait();\n\n            case 21:\n              assert.equal(name, 'objectInspector:updateProperty');\n              assert.equal(message.value.inspect, 'bar');\n\n              // teardown\n              ignoreErrors = true;\n\n            case 24:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function (_x5) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n});","define('ember-inspector/tests/ember_debug/profile-manager-test', ['qunit', 'require'], function (_qunit, _require2) {\n  'use strict';\n\n  var ProfileManager = (0, _require2.default)('ember-debug/models/profile-manager').default;\n\n  (0, _qunit.test)(\"Construction\", function (assert) {\n    var manager = new ProfileManager();\n    assert.ok(!!manager, \"it was created\");\n    assert.equal(manager.profiles.length, 0, \"it has no profiles\");\n  });\n});","define('ember-inspector/tests/ember_debug/profile-node-test', ['require', 'qunit'], function (_require2, _qunit) {\n  'use strict';\n\n  var ProfileNode = (0, _require2.default)('ember-debug/models/profile-node').default;\n\n  (0, _qunit.module)(\"ProfileNode\");\n\n  (0, _qunit.test)(\"It can create a ProfileNode\", function (assert) {\n    var p = new ProfileNode(1001, { template: 'application' });\n\n    assert.ok(!!p, \"it creates a ProfileNode\");\n    assert.equal(p.start, 1001, \"it stores the start time\");\n    assert.equal(p.name, \"application\", \"it extracted the correct name\");\n    assert.equal(p.children.length, 0, \"it has no children by default\");\n    assert.ok(!p.time, \"It has no time because it's unfinished\");\n  });\n\n  (0, _qunit.test)(\"with no payload it has an unknown name\", function (assert) {\n    var p = new ProfileNode(1234);\n    assert.equal(p.name, \"Unknown view\");\n  });\n\n  (0, _qunit.test)(\"It can extract the name from an object payload\", function (assert) {\n    var p = new ProfileNode(1000, {\n      object: {\n        toString: function toString() {\n          return \"custom toString()\";\n        }\n      }\n    });\n\n    assert.equal(p.name, \"custom toString()\", \"it called toString()\");\n  });\n\n  (0, _qunit.test)(\"It can create a child ProfileNode\", function (assert) {\n    var p1 = new ProfileNode(new Date().getTime(), { template: 'items' });\n    var p2 = new ProfileNode(new Date().getTime(), { template: 'item' }, p1);\n\n    assert.ok(!p1.parent, \"Without a parent parameter, the attribute is not set\");\n    assert.equal(p2.parent, p1, \"If passed, p2's parent is assigned to p1\");\n    assert.ok(!p1.time, \"p1 has no time because it's unfinished\");\n    assert.ok(!p2.time, \"p2 has no time because it's unfinished\");\n  });\n\n  (0, _qunit.test)(\"It can finish the timer\", function (assert) {\n    var p = new ProfileNode(1000, { template: 'users' });\n    p.finish(1004);\n    assert.equal(p.time, 4, \"it took 4 ms\");\n  });\n\n  (0, _qunit.test)(\"When a node has children, they are inserted when finished\", function (assert) {\n    var p1 = new ProfileNode(1000, { template: 'candies' });\n    var p2 = new ProfileNode(1001, { template: 'candy' }, p1);\n\n    assert.equal(p1.children.length, 0, \"has no children at first\");\n    p2.finish(2022);\n    assert.equal(p1.children[0], p2, \"has a child after p2 finishes\");\n  });\n\n  (0, _qunit.test)(\"Can be serialized as JSON\", function (assert) {\n    var p1 = new ProfileNode(1000, { template: 'donuts' });\n    var p2 = new ProfileNode(1001, { template: 'donut' }, p1);\n\n    p2.finish(1003);\n    p1.finish(1004);\n\n    assert.ok(JSON.stringify(p1), \"it can serialize due to no cycles in the object\");\n  });\n\n  (0, _qunit.test)(\"Name takes the following priority: display, containerKey, object\", function (assert) {\n    var p = void 0;\n    p = new ProfileNode(1000, { view: { instrumentDisplay: 'donuts', _debugContainerKey: 'candy' }, object: 'coffee' });\n    assert.equal(p.name, 'donuts');\n    p = new ProfileNode(1000, { view: { _debugContainerKey: 'candy' }, object: 'coffee' });\n    assert.equal(p.name, 'candy');\n    p = new ProfileNode(1000, { object: 'coffee' });\n    assert.equal(p.name, 'coffee');\n  });\n});","define('ember-inspector/tests/ember_debug/promise-assembler-test', ['qunit', 'require'], function (_qunit, _require2) {\n  'use strict';\n\n  var PromiseAssembler = (0, _require2.default)('ember-debug/libs/promise-assembler').default;\n\n  var assembler = void 0;\n\n  var fakeRSVP = void 0;\n\n  function stubRSVP() {\n    fakeRSVP = Ember.Object.extend(Ember.Evented, {\n      configure: function configure() {}\n    }).create();\n  }\n\n  function startAssembler() {\n    Ember.run(assembler, 'start');\n  }\n\n  (0, _qunit.module)(\"PromiseAssembler\", {\n    beforeEach: function beforeEach() {\n      stubRSVP();\n      Ember.run(function () {\n        assembler = PromiseAssembler.create({\n          RSVP: fakeRSVP\n        });\n      });\n    },\n    afterEach: function afterEach() {\n      if (assembler) {\n        Ember.run(assembler, 'destroy');\n        assembler = null;\n      }\n    }\n  });\n\n  (0, _qunit.test)(\"Creates promises correctly\", function (assert) {\n    startAssembler();\n    var date = new Date();\n    var event = void 0;\n\n    assembler.on('created', function (e) {\n      event = e;\n    });\n\n    fakeRSVP.trigger('created', {\n      guid: 1,\n      label: 'label',\n      timeStamp: date,\n      stack: 'stack'\n    });\n\n    assert.ok(event);\n    var promise = event.promise;\n    assert.equal(event.promise, assembler.find(promise.get('guid')));\n\n    assert.equal(assembler.find().get('length'), 1);\n\n    assert.equal(promise.get('guid'), 1);\n    assert.equal(promise.get('label'), 'label');\n    assert.equal(promise.get('createdAt'), date);\n    assert.equal(promise.get('stack'), 'stack');\n    assert.equal(promise.get('state'), 'created');\n  });\n\n  (0, _qunit.test)(\"Chains a promise correctly (parent and child not-existing)\", function (assert) {\n    startAssembler();\n    var date = new Date();\n    var event = void 0;\n\n    assembler.on('chained', function (e) {\n      event = e;\n    });\n\n    fakeRSVP.trigger('chained', {\n      guid: 1,\n      label: 'label',\n      timeStamp: date,\n      childGuid: 2\n    });\n\n    var parent = event.promise;\n    var child = event.child;\n\n    assert.equal(assembler.find(parent.get('guid')), parent);\n    assert.equal(assembler.find(child.get('guid')), child);\n\n    assert.equal(assembler.find().get('length'), 2);\n\n    assert.equal(parent.get('guid'), 1);\n    assert.equal(parent.get('label'), 'label');\n    assert.equal(parent.get('chainedAt'), date);\n    assert.equal(parent.get('children.length'), 1);\n    assert.equal(child.get('guid'), 2);\n    assert.equal(child.get('parent'), parent);\n  });\n\n  (0, _qunit.test)(\"Chains a promise correctly (parent and child existing)\", function (assert) {\n\n    startAssembler();\n    var date = new Date();\n    var event = void 0;\n    var parent = void 0;\n    var child = void 0;\n\n    assembler.on('created', function (e) {\n      parent = e.promise;\n    });\n\n    fakeRSVP.trigger('created', {\n      guid: 1\n    });\n\n    assembler.off('created');\n\n    assembler.on('created', function (e) {\n      child = e.promise;\n    });\n\n    fakeRSVP.trigger('created', {\n      guid: 2\n    });\n\n    assembler.on('chained', function (e) {\n      event = e;\n    });\n\n    fakeRSVP.trigger('chained', {\n      guid: 1,\n      label: 'label',\n      timeStamp: date,\n      childGuid: 2\n    });\n\n    assert.equal(parent, event.promise);\n    assert.equal(child, event.child);\n\n    assert.equal(assembler.find(parent.get('guid')), parent);\n    assert.equal(assembler.find(child.get('guid')), child);\n\n    assert.equal(assembler.find().get('length'), 2);\n\n    assert.equal(parent.get('guid'), 1);\n    assert.equal(parent.get('label'), 'label');\n    assert.equal(parent.get('chainedAt'), date);\n    assert.equal(parent.get('children.length'), 1);\n    assert.equal(child.get('guid'), 2);\n    assert.equal(child.get('parent'), parent);\n  });\n\n  (0, _qunit.test)(\"Fulfills a promise correctly\", function (assert) {\n    startAssembler();\n    var date = new Date();\n    var event = void 0;\n    var promise = void 0;\n\n    assembler.on('created', function (e) {\n      promise = e.promise;\n    });\n\n    fakeRSVP.trigger('created', {\n      guid: 1\n    });\n\n    assembler.off('created');\n\n    assert.equal(promise.get('state'), 'created');\n\n    assembler.on('fulfilled', function (e) {\n      event = e;\n    });\n\n    fakeRSVP.trigger('fulfilled', {\n      guid: 1,\n      detail: 'value',\n      timeStamp: date\n    });\n\n    assert.equal(event.promise, promise);\n    assert.equal(promise.get('state'), 'fulfilled');\n    assert.equal(promise.get('value'), 'value');\n    assert.equal(promise.get('settledAt'), date);\n    assert.equal(assembler.find().get('length'), 1);\n  });\n\n  (0, _qunit.test)(\"Rejects a promise correctly\", function (assert) {\n    startAssembler();\n    var date = new Date();\n    var event = void 0;\n    var promise = void 0;\n\n    assembler.on('created', function (e) {\n      promise = e.promise;\n    });\n\n    fakeRSVP.trigger('created', {\n      guid: 1\n    });\n\n    assembler.off('created');\n\n    assert.equal(promise.get('state'), 'created');\n\n    assembler.on('rejected', function (e) {\n      event = e;\n    });\n\n    fakeRSVP.trigger('rejected', {\n      guid: 1,\n      detail: 'reason',\n      timeStamp: date\n    });\n\n    assert.equal(event.promise, promise);\n    assert.equal(promise.get('state'), 'rejected');\n    assert.equal(promise.get('reason'), 'reason');\n    assert.equal(promise.get('settledAt'), date);\n    assert.equal(assembler.find().get('length'), 1);\n  });\n\n  (0, _qunit.test)('#stop', function (assert) {\n    startAssembler();\n\n    fakeRSVP.trigger('created', {\n      guid: 1\n    });\n    assert.equal(assembler.find().get('length'), 1);\n\n    Ember.run(assembler, 'stop');\n\n    assert.equal(assembler.find().get('length'), 0);\n    assembler.on('created', function () {\n      assert.ok(false);\n    });\n    fakeRSVP.trigger('created', { guid: 1 });\n    assert.equal(assembler.find().get('length'), 0);\n  });\n});","define('ember-inspector/tests/ember_debug/promise-debug-test', ['qunit', 'require'], function (_qunit, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var EmberDebug = (0, _require2.default)(\"ember-debug/main\").default;\n\n  var port = void 0,\n      name = void 0,\n      message = void 0,\n      RSVP = Ember.RSVP;\n  var App = void 0;\n  var run = Ember.run,\n      emberA = Ember.A;\n\n\n  function setupApp() {\n    App = Ember.Application.create();\n    App.injectTestHelpers();\n    App.setupForTesting();\n  }\n\n  // RSVP instrumentation is out of band (50 ms delay)\n\n  var rsvpDelay = function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Ember.run.later(function () {}, 100);\n              _context.next = 3;\n              return wait();\n\n            case 3:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function rsvpDelay() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  (0, _qunit.module)(\"Promise Debug\", {\n    beforeEach: function beforeEach() {\n\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send(n, m) {\n          name = n;\n          message = m;\n        }\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      Ember.run(EmberDebug, 'start');\n      EmberDebug.get('promiseDebug').reopen({\n        delay: 5,\n        session: {\n          getItem: function getItem() {},\n          setItem: function setItem() {},\n          removeItem: function removeItem() {}\n        }\n      });\n      port = EmberDebug.port;\n    },\n    afterEach: function afterEach() {\n      name = null;\n      message = null;\n      EmberDebug.destroyContainer();\n      Ember.run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"Existing promises sent when requested\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var promise1, child1, promise2, promises;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              promise1 = void 0, child1 = void 0, promise2 = void 0;\n\n\n              run(function () {\n                RSVP.resolve('value', \"Promise1\").then(function () {}, null, \"Child1\");\n\n                // catch so we don't get a promise failure\n                RSVP.reject('reason', \"Promise2\").catch(function () {});\n              });\n\n              _context2.next = 4;\n              return rsvpDelay();\n\n            case 4:\n\n              port.trigger('promise:getAndObservePromises');\n\n              assert.equal(name, 'promise:promisesUpdated');\n\n              promises = emberA(message.promises);\n\n\n              promise1 = promises.findBy('label', 'Promise1');\n              child1 = promises.findBy('label', 'Child1');\n              promise2 = promises.findBy('label', 'Promise2');\n\n              assert.equal(promise1.label, 'Promise1');\n              assert.equal(promise1.state, 'fulfilled');\n              assert.equal(promise1.children.length, 1);\n              assert.equal(promise1.children[0], child1.guid);\n\n              assert.equal(child1.label, 'Child1');\n              assert.equal(child1.state, 'fulfilled');\n              assert.equal(child1.parent, promise1.guid);\n\n              assert.equal(promise2.label, 'Promise2');\n              assert.equal(promise2.state, 'rejected');\n\n            case 19:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Updates are published when they happen\", function (assert) {\n    port.trigger('promise:getAndObservePromises');\n\n    var p = void 0;\n\n    run(function () {\n      p = new RSVP.Promise(function () {}, \"Promise1\");\n    });\n\n    var done = assert.async();\n    Ember.run.later(function () {\n      assert.equal(name, 'promise:promisesUpdated');\n      var promises = emberA(message.promises);\n      var promise = promises.findBy('label', 'Promise1');\n      assert.ok(!!promise);\n      if (promise) {\n        assert.equal(promise.label, 'Promise1');\n        p.then(function () {}, null, \"Child1\");\n        Ember.run.later(function () {\n          assert.equal(name, 'promise:promisesUpdated');\n          assert.equal(message.promises.length, 2);\n          var child = message.promises[0];\n          assert.equal(child.parent, promise.guid);\n          assert.equal(child.label, 'Child1');\n          var parent = message.promises[1];\n          assert.equal(parent.guid, promise.guid);\n          done();\n        }, 200);\n      }\n    }, 200);\n  });\n\n  (0, _qunit.test)(\"Instrumentation with stack is persisted to session storage\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var withStack;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              withStack = false;\n\n              EmberDebug.get('promiseDebug').reopen({\n                session: {\n                  getItem: function getItem() /*key*/{\n                    return withStack;\n                  },\n                  setItem: function setItem(key, val) {\n                    withStack = val;\n                  }\n                }\n              });\n              // Clear CP cache\n              EmberDebug.get('promiseDebug').propertyDidChange('instrumentWithStack');\n\n              _context3.next = 5;\n              return wait();\n\n            case 5:\n              port.trigger('promise:getInstrumentWithStack');\n\n              _context3.next = 8;\n              return wait();\n\n            case 8:\n              assert.equal(name, 'promise:instrumentWithStack');\n              assert.equal(message.instrumentWithStack, false);\n              port.trigger('promise:setInstrumentWithStack', {\n                instrumentWithStack: true\n              });\n\n              _context3.next = 13;\n              return wait();\n\n            case 13:\n              assert.equal(name, 'promise:instrumentWithStack');\n              assert.equal(message.instrumentWithStack, true);\n              assert.equal(withStack, true, 'persisted');\n              port.trigger('promise:setInstrumentWithStack', {\n                instrumentWithStack: false\n              });\n\n              _context3.next = 19;\n              return wait();\n\n            case 19:\n              assert.equal(name, 'promise:instrumentWithStack');\n              assert.equal(message.instrumentWithStack, false);\n              assert.equal(withStack, false, 'persisted');\n\n            case 22:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _qunit.test)(\"Responds even if no promises detected\", function (assert) {\n    port.trigger('promise:getAndObservePromises');\n    assert.equal(name, 'promise:promisesUpdated');\n    assert.equal(message.promises.length, 0);\n  });\n});","define('ember-inspector/tests/ember_debug/render-debug-test', ['qunit', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var EmberDebug = (0, _require2.default)('ember-debug/main').default;\n  var run = Ember.run,\n      Application = Ember.Application;\n\n  var port = void 0,\n      App = void 0;\n\n  function setupApp() {\n    App = Application.create();\n    App.setupForTesting();\n    App.injectTestHelpers();\n\n    App.Router.map(function () {\n      this.route('simple');\n    });\n    Ember.TEMPLATES.simple = Ember.HTMLBars.template({\n      \"id\": \"5fP4EWun\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"Simple template\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    });\n  }\n\n  (0, _qunit.module)(\"Render Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send() {}\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      run(EmberDebug, 'start');\n      port = EmberDebug.port;\n    },\n    afterEach: function afterEach() {\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"Simple Render\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var profiles;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              profiles = [];\n\n              port.reopen({\n                send: function send(n, m) {\n                  if (n === \"render:profilesAdded\") {\n                    profiles = profiles.concat(m.profiles);\n                  }\n                }\n              });\n              port.trigger('render:watchProfiles');\n\n              _context.next = 5;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 5:\n\n              assert.ok(profiles.length > 0, \"it has created profiles\");\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Clears correctly\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var profiles;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              profiles = [];\n\n\n              port.reopen({\n                send: function send(n, m) {\n                  if (n === \"render:profilesAdded\") {\n                    profiles.push(m.profiles);\n                  }\n                  if (n === \"render:profilesUpdated\") {\n                    profiles = m.profiles;\n                  }\n                }\n              });\n\n              port.trigger('render:watchProfiles');\n\n              _context2.next = 5;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 5:\n\n              assert.ok(profiles.length > 0, \"it has created profiles\");\n              port.trigger('render:clear');\n              _context2.next = 9;\n              return wait();\n\n            case 9:\n\n              assert.ok(profiles.length === 0, \"it has cleared the profiles\");\n\n            case 10:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x2) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/ember_debug/route-debug-test', ['qunit', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var run = Ember.run,\n      Application = Ember.Application,\n      Route = Ember.Route;\n\n  var get = Ember.get;\n\n  var EmberDebug = (0, _require2.default)('ember-debug/main').default;\n  var port = void 0;\n  var App = void 0;\n\n  function setupApp() {\n    App = Application.create();\n    App.toString = function () {\n      return 'App';\n    };\n    App.setupForTesting();\n    App.injectTestHelpers();\n\n    App.Router.map(function () {\n      this.route('simple');\n      this.route('posts', { resetNamespace: true });\n      this.route('comments', { resetNamespace: true }, function () {\n        this.route('new');\n        this.route('edit', { path: '/edit/:comment_id' });\n      });\n    });\n\n    App.LoadingRoute = App.ErrorRoute = Route;\n  }\n\n  function getChildrenProperty(route, prop) {\n    return route.children.map(function (item) {\n      return get(item.value, prop);\n    });\n  }\n\n  (0, _qunit.module)(\"Route Tree Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send() {}\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      run(EmberDebug, 'start');\n      EmberDebug.get('generalDebug').reopen({\n        emberCliConfig: null\n      });\n      port = EmberDebug.port;\n    },\n    afterEach: function afterEach() {\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)(\"Route tree\", function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var name, message, route, commentsRoute;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = null, message = null, route = void 0;\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n                }\n              });\n\n              _context.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/');\n\n            case 4:\n\n              run(port, 'trigger', 'route:getTree');\n              _context.next = 7;\n              return wait();\n\n            case 7:\n\n              assert.equal(name, 'route:routeTree');\n\n              route = message.tree.children[0];\n              assert.equal(route.value.name, 'application');\n              assert.equal(route.value.type, 'resource');\n              assert.equal(route.value.controller.name, 'application');\n              assert.equal(route.value.controller.className, 'ApplicationController');\n              assert.equal(route.value.routeHandler.name, 'application');\n              assert.equal(route.value.routeHandler.className, 'ApplicationRoute');\n              assert.equal(route.value.template.name, 'application');\n              assert.equal(route.children.length, 6);\n\n              assert.deepEqual(getChildrenProperty(route, 'name'), ['loading', 'error', 'simple', 'posts', 'comments', 'index']);\n\n              commentsRoute = route.children.filter(function (child) {\n                return child.value.name === 'comments';\n              })[0];\n\n\n              assert.ok(commentsRoute, 'expected comment steps');\n\n              assert.equal(commentsRoute.children.length, 3);\n              assert.equal(commentsRoute.value.type, 'resource');\n              assert.equal(commentsRoute.value.controller.className, 'CommentsController');\n              assert.equal(commentsRoute.value.routeHandler.className, 'CommentsRoute');\n\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'name'), ['comments.new', 'comments.edit', 'comments.index']);\n\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'url'), ['/comments/new', '/comments/edit/:comment_id', '/comments']);\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'type'), ['route', 'route', 'route']);\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'controller.className'), ['CommentsNewController', 'CommentsEditController', 'CommentsIndexController']);\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'routeHandler.className'), ['CommentsNewRoute', 'CommentsEditRoute', 'CommentsIndexRoute']);\n              assert.deepEqual(getChildrenProperty(commentsRoute, 'template.name'), ['comments/new', 'comments/edit', 'comments/index']);\n\n            case 30:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/ember_debug/view-debug-test', ['qunit', 'ember-native-dom-helpers', 'require'], function (_qunit, _emberNativeDomHelpers, _require2) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var Application = Ember.Application;\n\n\n  var EmberDebug = (0, _require2.default)('ember-debug/main').default;\n  var Route = Ember.Route,\n      EmberObject = Ember.Object,\n      Controller = Ember.Controller;\n\n  var port = void 0;\n  var App = void 0,\n      run = Ember.run;\n  var OLD_TEMPLATES = {};\n\n  function setTemplate(name, template) {\n    OLD_TEMPLATES = Ember.TEMPLATES[name];\n    template.meta.moduleName = name;\n    Ember.TEMPLATES[name] = template;\n  }\n\n  function destroyTemplates() {\n    for (var name in OLD_TEMPLATES) {\n      Ember.TEMPLATES[name] = OLD_TEMPLATES[name];\n    }\n    OLD_TEMPLATES = {};\n  }\n\n  function isVisible(elem) {\n    return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n  }\n\n  function setupApp() {\n    App = Application.create();\n    App.setupForTesting();\n    App.injectTestHelpers();\n\n    App.Router.map(function () {\n      this.route('simple');\n      this.route('comments', { resetNamespace: true }, function () {});\n      this.route('posts', { resetNamespace: true });\n    });\n\n    App.ApplicationRoute = Route.extend({\n      model: function model() {\n        return EmberObject.create({\n          toString: function toString() {\n            return 'Application model';\n          }\n        });\n      }\n    });\n\n    App.SimpleRoute = Route.extend({\n      model: function model() {\n        return EmberObject.create({\n          toString: function toString() {\n            return 'Simple Model';\n          }\n        });\n      }\n    });\n\n    App.CommentsIndexRoute = Route.extend({\n      model: function model() {\n        return Ember.A(['first comment', 'second comment', 'third comment']);\n      }\n    });\n\n    App.PostsRoute = Route.extend({\n      model: function model() {\n        return 'String as model';\n      }\n    });\n\n    App.ApplicationController = Controller.extend();\n    App.ApplicationController.reopenClass({\n      toString: function toString() {\n        return 'App.ApplicationController';\n      }\n    });\n    App.SimpleController = Controller.extend();\n    App.SimpleController.reopenClass({\n      toString: function toString() {\n        return 'App.SimpleController';\n      }\n    });\n\n    setTemplate('application', Ember.HTMLBars.template({\n      \"id\": \"8ihaQt84\",\n      \"block\": \"{\\\"statements\\\":[[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"application\\\"],[13],[1,[26,[\\\"outlet\\\"]],false],[14]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    setTemplate('simple', Ember.HTMLBars.template({\n      \"id\": \"/BitCTck\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"Simple \\\"],[1,[33,[\\\"input\\\"],null,[[\\\"class\\\"],[\\\"simple-input\\\"]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    setTemplate('comments/index', Ember.HTMLBars.template({\n      \"id\": \"T3lOpZ4a\",\n      \"block\": \"{\\\"statements\\\":[[6,[\\\"each\\\"],null,null,{\\\"statements\\\":[[1,[28,[null]],false]],\\\"locals\\\":[]},null]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    setTemplate('posts', Ember.HTMLBars.template({\n      \"id\": \"MRtcATCq\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"Posts\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n  }\n  var defaultRootForFinder = void 0;\n  (0, _qunit.module)(\"View Debug\", {\n    beforeEach: function beforeEach() {\n      EmberDebug.Port = EmberDebug.Port.extend({\n        init: function init() {},\n        send: function send() {}\n      });\n      run(function () {\n        setupApp();\n        EmberDebug.set('application', App);\n      });\n      EmberDebug.IGNORE_DEPRECATIONS = true;\n      run(EmberDebug, 'start');\n      port = EmberDebug.port;\n      defaultRootForFinder = _emberNativeDomHelpers.settings.rootElement;\n      _emberNativeDomHelpers.settings.rootElement = 'body';\n    },\n    afterEach: function afterEach() {\n      EmberDebug.destroyContainer();\n      run(App, 'destroy');\n      destroyTemplates();\n      _emberNativeDomHelpers.settings.rootElement = defaultRootForFinder;\n    }\n  });\n\n  (0, _qunit.test)(\"Simple View Tree\", function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n      var name, message, tree, value;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = null, message = null;\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n                }\n              });\n\n              _context.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 4:\n\n              assert.equal(name, 'view:viewTree');\n              tree = message.tree;\n              value = tree.value;\n\n              assert.equal(tree.children.length, 1);\n              assert.equal(value.controller.name, 'App.ApplicationController');\n              assert.equal(value.name, 'application');\n              assert.equal(value.tagName, 'div');\n              assert.equal(value.template, 'application');\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Components in view tree\", function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {\n      var message, tree, simple, component;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              message = void 0;\n\n              port.reopen({\n                send: function send(n, m) {\n                  message = m;\n                }\n              });\n\n              _context2.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 4:\n              tree = message.tree;\n              simple = tree.children[0];\n\n              assert.equal(simple.children.length, 0, \"Components are not listed by default.\");\n              run(function () {\n                port.trigger('view:setOptions', { options: { components: true } });\n              });\n\n              _context2.next = 10;\n              return wait();\n\n            case 10:\n\n              tree = message.tree;\n              simple = tree.children[0];\n              assert.equal(simple.children.length, 1, \"Components can be configured to show.\");\n              component = simple.children[0];\n\n              assert.equal(component.value.viewClass, 'Ember.TextField');\n\n            case 15:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function t(_x2) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Highlighting Views on hover\", function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {\n      var name, message, previewDiv, layerDiv, controller;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              name = void 0, message = void 0;\n\n              port.reopen({\n                send: function send(n, m) {\n                  name = n;\n                  message = m;\n                }\n              });\n\n              _context3.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 4:\n\n              run(function () {\n                return port.trigger('view:inspectViews', { inspect: true });\n              });\n              _context3.next = 7;\n              return wait();\n\n            case 7:\n              _context3.next = 9;\n              return (0, _emberNativeDomHelpers.triggerEvent)('.application', 'mousemove');\n\n            case 9:\n              previewDiv = (0, _emberNativeDomHelpers.find)('[data-label=preview-div]');\n\n\n              assert.ok(isVisible(previewDiv));\n              assert.notOk((0, _emberNativeDomHelpers.find)('[data-label=layer-component]'), \"Component layer not shown on outlet views\");\n              assert.equal((0, _emberNativeDomHelpers.find)('[data-label=layer-controller]', previewDiv).textContent, 'App.ApplicationController');\n              assert.equal((0, _emberNativeDomHelpers.find)('[data-label=layer-model]', previewDiv).textContent, 'Application model');\n\n              layerDiv = (0, _emberNativeDomHelpers.find)('[data-label=layer-div]');\n              _context3.next = 17;\n              return (0, _emberNativeDomHelpers.triggerEvent)(layerDiv, 'mouseup');\n\n            case 17:\n\n              assert.ok(isVisible(layerDiv));\n              assert.equal((0, _emberNativeDomHelpers.find)('[data-label=layer-model]', layerDiv).textContent, 'Application model');\n              _context3.next = 21;\n              return (0, _emberNativeDomHelpers.click)('[data-label=layer-controller]', layerDiv);\n\n            case 21:\n              controller = App.__container__.lookup('controller:application');\n\n              assert.equal(name, 'objectInspector:updateObject');\n              assert.equal(controller.toString(), message.name);\n              name = null;\n              message = null;\n\n              _context3.next = 28;\n              return (0, _emberNativeDomHelpers.click)('[data-label=layer-model]', layerDiv);\n\n            case 28:\n\n              assert.equal(name, 'objectInspector:updateObject');\n              assert.equal(message.name, 'Application model');\n              _context3.next = 32;\n              return (0, _emberNativeDomHelpers.click)('[data-label=layer-close]');\n\n            case 32:\n\n              assert.notOk(isVisible(layerDiv));\n\n              run(function () {\n                return port.trigger('view:inspectViews', { inspect: true });\n              });\n              _context3.next = 36;\n              return wait();\n\n            case 36:\n              _context3.next = 38;\n              return (0, _emberNativeDomHelpers.triggerEvent)('.simple-input', 'mousemove');\n\n            case 38:\n\n              previewDiv = (0, _emberNativeDomHelpers.find)('[data-label=preview-div]');\n              assert.ok(isVisible(previewDiv));\n              assert.equal((0, _emberNativeDomHelpers.find)('[data-label=layer-component]').textContent.trim(), \"Ember.TextField\");\n              assert.notOk((0, _emberNativeDomHelpers.find)('[data-label=layer-controller]', previewDiv));\n              assert.notOk((0, _emberNativeDomHelpers.find)('[data-label=layer-model]', previewDiv));\n\n            case 43:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function t(_x3) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Highlighting a view without an element should not throw an error\", function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {\n      var message, tree, postsView;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              message = null;\n\n              port.reopen({\n                send: function send(n, m) {\n                  message = m;\n                }\n              });\n\n              _context4.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/posts');\n\n            case 4:\n              tree = message.tree;\n              postsView = tree.children[0];\n\n              port.trigger('view:previewLayer', { objectId: postsView.value.objectId });\n              _context4.next = 9;\n              return wait();\n\n            case 9:\n\n              assert.ok(true, \"Does not throw an error.\");\n\n            case 10:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function t(_x4) {\n      return _ref5.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Supports a view with a string as model\", function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {\n      var message;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              message = null;\n\n              port.reopen({\n                send: function send(n, m) {\n                  message = m;\n                }\n              });\n\n              _context5.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/posts');\n\n            case 4:\n\n              assert.equal(message.tree.children[0].value.model.name, 'String as model');\n              assert.equal(message.tree.children[0].value.model.type, 'type-string');\n\n            case 6:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function t(_x5) {\n      return _ref6.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Supports applications that don't have the ember-application CSS class\", function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {\n      var name, rootElement;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              name = null;\n              rootElement = (0, _emberNativeDomHelpers.find)('');\n              _context6.next = 4;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 4:\n\n              assert.ok(rootElement.classList.contains('ember-application'), \"The rootElement has the .ember-application CSS class\");\n              rootElement.classList.remove('ember-application');\n\n              // Restart the inspector\n              EmberDebug.start();\n              port = EmberDebug.port;\n\n              port.reopen({\n                send: function send(n /*, m*/) {\n                  name = n;\n                }\n              });\n\n              _context6.next = 11;\n              return (0, _emberNativeDomHelpers.visit)('/simple');\n\n            case 11:\n\n              assert.equal(name, 'view:viewTree');\n\n            case 12:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function t(_x6) {\n      return _ref7.apply(this, arguments);\n    }\n\n    return t;\n  }());\n\n  (0, _qunit.test)(\"Does not list nested {{yield}} views\", function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {\n      var message;\n      return regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              message = null;\n\n              port.reopen({\n                send: function send(n, m) {\n                  message = m;\n                }\n              });\n\n              setTemplate('posts', Ember.HTMLBars.template({\n                \"id\": \"Pv4u7GU4\",\n                \"block\": \"{\\\"statements\\\":[[6,[\\\"x-first\\\"],null,null,{\\\"statements\\\":[[0,\\\"Foo\\\"]],\\\"locals\\\":[]},null]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n                \"meta\": {}\n              }));\n              setTemplate('components/x-first', Ember.HTMLBars.template({\n                \"id\": \"k8JWQ6z4\",\n                \"block\": \"{\\\"statements\\\":[[6,[\\\"x-second\\\"],null,null,{\\\"statements\\\":[[18,\\\"default\\\"]],\\\"locals\\\":[]},null]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[\\\"default\\\"],\\\"hasPartials\\\":false}\",\n                \"meta\": {}\n              }));\n              setTemplate('components/x-second', Ember.HTMLBars.template({\n                \"id\": \"+QzkJC2M\",\n                \"block\": \"{\\\"statements\\\":[[18,\\\"default\\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[\\\"default\\\"],\\\"hasPartials\\\":false}\",\n                \"meta\": {}\n              }));\n\n              _context7.next = 7;\n              return (0, _emberNativeDomHelpers.visit)('/posts');\n\n            case 7:\n\n              assert.equal(message.tree.children.length, 1, 'Only the posts view should render');\n              assert.equal(message.tree.children[0].children.length, 0, 'posts view should have no children');\n\n            case 9:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function t(_x7) {\n      return _ref8.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define('ember-inspector/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('ember-inspector/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember-inspector/tests/helpers/start-app', 'ember-inspector/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = Ember.RSVP.Promise;\n});","define('ember-inspector/tests/helpers/resolver', ['exports', 'ember-inspector/resolver', 'ember-inspector/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('ember-inspector/tests/helpers/start-app', ['exports', 'ember-inspector/app', 'ember-inspector/config/environment', 'ember-inspector/tests/helpers/trigger-port'], function (exports, _app, _environment, _triggerPort) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var generateGuid = Ember.generateGuid;\n  function startApp(attrs) {\n\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    _app.default.instanceInitializer({\n      name: generateGuid() + '-detectEmberApplication',\n      initialize: function initialize(instance) {\n        instance.lookup('route:app-detected').reopen({\n          model: function model() {}\n        });\n      }\n    });\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('ember-inspector/tests/helpers/trigger-port', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var run = Ember.run,\n      registerHelper = Ember.Test.registerHelper;\n  exports.default = registerHelper('triggerPort', function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(app) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              run(function () {\n                var _app$__container__$lo;\n\n                return (_app$__container__$lo = app.__container__.lookup('port:main')).trigger.apply(_app$__container__$lo, _toConsumableArray(args));\n              });\n              _context.next = 3;\n              return wait();\n\n            case 3:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function t(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return t;\n  }());\n});","define(\"ember-inspector/tests/template-deprecations-test\", [], function () {\n  \"use strict\";\n});","define('ember-inspector/tests/test-helper', ['ember-inspector/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n\n  window.NO_EMBER_DEBUG = true;\n  (0, _emberCliQunit.start)();\n});","define('ember-inspector/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/container-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/container-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/deprecation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/deprecation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/object-inspector-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/object-inspector-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/promise-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/promise-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/render-tree-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/render-tree-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/route-tree-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/route-tree-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/view-tree-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/view-tree-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/container-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/container-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/deprecation-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/deprecation-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/ember-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/ember-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/object-inspector-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/object-inspector-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/profile-manager-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/profile-manager-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/profile-node-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/profile-node-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/promise-assembler-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/promise-assembler-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/promise-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/promise-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/render-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/render-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/route-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/route-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('ember_debug/view-debug-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember_debug/view-debug-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/trigger-port.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/trigger-port.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/build-style-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/build-style-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/check-current-route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/check-current-route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/ms-to-time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/ms-to-time-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/resizable-columns-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/resizable-columns-test.js should pass ESLint\\n\\n');\n  });\n});","define('ember-inspector/tests/unit/build-style-test', ['ember-inspector/helpers/build-style', 'qunit'], function (_buildStyle, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | buildStyle');\n\n  (0, _qunit.test)('it should convert options to a string', function (assert) {\n    var options = { prop1: '1', prop2: '2' };\n    var style = (0, _buildStyle.buildStyle)(null, options);\n    assert.equal(style.toString(), 'prop1:1;prop2:2;');\n  });\n});","define('ember-inspector/tests/unit/check-current-route-test', ['ember-inspector/utils/check-current-route', 'qunit'], function (_checkCurrentRoute, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)(\"Unit | Helper | checkCurrentRoute\");\n\n  (0, _qunit.test)(\"matches the correct routes\", function (assert) {\n    assert.ok((0, _checkCurrentRoute.default)('whatever', 'application'), 'application is always current');\n    assert.ok((0, _checkCurrentRoute.default)('index', 'index'), 'index route matches correctly');\n    assert.ok(!(0, _checkCurrentRoute.default)('posts.index', 'index'), 'resource match fails even when route name same as resource name');\n\n    assert.ok((0, _checkCurrentRoute.default)('posts.show', 'posts'), 'resource matches correctly');\n    assert.ok(!(0, _checkCurrentRoute.default)('posts.show', 'comments'), 'resource matches correctly');\n    assert.ok((0, _checkCurrentRoute.default)('posts.comments.show', 'posts'), 'parent resource of nested resources matches correctly');\n    assert.ok((0, _checkCurrentRoute.default)('comments.show', 'comments.show'), 'exact resource and route matches correctly');\n    assert.ok((0, _checkCurrentRoute.default)('posts.comments.show', 'comments.show'), 'child resource and route matches correctly');\n  });\n});","define('ember-inspector/tests/unit/ms-to-time-test', ['ember-inspector/helpers/ms-to-time', 'qunit'], function (_msToTime, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | ms to time');\n\n  (0, _qunit.test)('it should format time to a readable string', function (assert) {\n    assert.equal((0, _msToTime.msToTime)([0.42]), '0.42ms');\n  });\n});","define('ember-inspector/tests/unit/resizable-columns-test', ['ember-inspector/libs/resizable-columns', 'qunit'], function (_resizableColumns, _qunit) {\n  'use strict';\n\n  var _keys = Object.keys;\n\n\n  var storage = void 0;\n\n  function getOptions() {\n    return {\n      key: 'my-key',\n      tableWidth: 30,\n      minWidth: 5,\n      storage: {\n        setItem: function setItem(key, value) {\n          storage[key] = value;\n        },\n        getItem: function getItem(key) {\n          return storage[key];\n        },\n        removeItem: function removeItem(key) {\n          delete storage[key];\n        },\n        keys: function keys() {\n          return _keys(storage);\n        }\n      },\n      columnSchema: [{\n        id: '1',\n        name: 'Column 1',\n        visible: true\n      }, {\n        id: '2',\n        name: 'Column 2',\n        visible: true\n      }, {\n        id: '3',\n        name: 'Column 3',\n        visible: true\n      }]\n    };\n  }\n\n  (0, _qunit.module)('Unit | Lib | ResizableColumns', {\n    beforeEach: function beforeEach() {\n      storage = {};\n      this.options = getOptions();\n    },\n    afterEach: function afterEach() {\n      storage = null;\n    }\n  });\n\n  (0, _qunit.test)('calculates the correct width', function (assert) {\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n    assert.equal(resizableColumns.columns.length, 3, \"shows all columns\");\n\n    var column = resizableColumns.columns[0];\n    assert.equal(column.id, '1', \"correct first column id\");\n    assert.equal(column.name, 'Column 1', \"correct first column name\");\n    assert.equal(column.width, 10, \"correct first column width\");\n\n    column = resizableColumns.columns[1];\n    assert.equal(column.id, '2', \"correct second column id\");\n    assert.equal(column.name, 'Column 2', \"correct second column name\");\n    assert.equal(column.width, 10, \"correct second colum width\");\n\n    column = resizableColumns.columns[2];\n    assert.equal(column.id, '3', \"correct third column id\");\n    assert.equal(column.name, 'Column 3', \"correct third column name\");\n    assert.equal(column.width, 10, \"correct first column width\");\n  });\n\n  (0, _qunit.test)('updates the width correctly', function (assert) {\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n\n    resizableColumns.updateColumnWidth('1', 5);\n    assert.equal(resizableColumns.columns[0].width, 5, \"first column should have the correct width\");\n    assert.equal(resizableColumns.columns[1].width, 10, \"second column should have the correct width\");\n    assert.equal(resizableColumns.columns[2].width, 15, \"last column should have the correct width\");\n\n    resizableColumns.updateColumnWidth('1', 15);\n    assert.equal(resizableColumns.columns[0].width, 15, \"first column should have the correct width\");\n    assert.equal(resizableColumns.columns[1].width, 10, \"second column should have the correct width\");\n    assert.equal(resizableColumns.columns[2].width, 5, \"last column should have the correct width\");\n\n    // Check if it caches the updated widths\n    resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n    assert.equal(resizableColumns.columns[0].width, 15, \"first column should have the correct width\");\n    assert.equal(resizableColumns.columns[1].width, 10, \"second column should have the correct width\");\n    assert.equal(resizableColumns.columns[2].width, 5, \"last column should have the correct width\");\n\n    resizableColumns.resetWidths();\n    assert.equal(resizableColumns.columns[0].width, 10, \"first column should have the correct width\");\n    assert.equal(resizableColumns.columns[1].width, 10, \"second column should have the correct width\");\n    assert.equal(resizableColumns.columns[2].width, 10, \"last column should have the correct width\");\n\n    // Table width upate\n    resizableColumns.setTableWidth(15);\n    assert.equal(resizableColumns.columns[0].width, 5, \"first column should have the correct width\");\n    assert.equal(resizableColumns.columns[1].width, 5, \"second column should have the correct width\");\n    assert.equal(resizableColumns.columns[2].width, 5, \"last column should have the correct width\");\n  });\n\n  (0, _qunit.test)('uses the correct cache key', function (assert) {\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n    assert.equal(this.options.storage.keys().length, 1, \"Only uses one key\");\n    assert.equal(this.options.storage.keys()[0], 'x-list__my-key', \"Uses the correct key\");\n  });\n\n  (0, _qunit.test)('shows/hides the correct columns', function (assert) {\n    this.options.columnSchema[2].visible = false;\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n\n    assert.deepEqual(resizableColumns.columns.mapBy('id'), ['1', '2'], \"shows/hides according to schema\");\n    assert.deepEqual(resizableColumns.getColumnVisibility().mapBy('visible'), [true, true, false]);\n\n    resizableColumns.toggleVisibility('3');\n    assert.deepEqual(resizableColumns.columns.mapBy('id'), ['1', '2', '3'], \"toggles the third column correctly\");\n    assert.deepEqual(resizableColumns.getColumnVisibility().mapBy('visible'), [true, true, true]);\n\n    resizableColumns.toggleVisibility('1');\n    assert.deepEqual(resizableColumns.columns.mapBy('id'), ['2', '3'], \"toggles the first column correctly\");\n    assert.deepEqual(resizableColumns.getColumnVisibility().mapBy('visible'), [false, true, true]);\n\n    // Confirm correct caching\n    resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n    assert.deepEqual(resizableColumns.columns.mapBy('id'), ['2', '3'], \"caching overrides schema visibility settings\");\n    assert.deepEqual(resizableColumns.getColumnVisibility().mapBy('visible'), [false, true, true]);\n  });\n\n  (0, _qunit.test)(\"resets cache correctly if schema doesn't match cache\", function (assert) {\n    assert.expect(1);\n    this.options.storage.removeItem = function (key) {\n      assert.equal(key, 'x-list__my-key', \"cache was cleared\");\n    };\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n    this.options.columnSchema = [{\n      id: '1',\n      name: 'Column 1',\n      visible: true\n    }];\n    resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n  });\n\n  (0, _qunit.test)(\"clears expired cache\", function (assert) {\n    var sixtyDaysAgo = 1000 * 60 * 60 * 24 * 30 * 2;\n    storage['x-list__my-key'] = { updatedAt: Date.now() - sixtyDaysAgo };\n    assert.expect(1);\n    this.options.storage.removeItem = function (key) {\n      assert.equal(key, 'x-list__my-key', \"cache was cleared\");\n    };\n    var resizableColumns = new _resizableColumns.default(this.options);\n    resizableColumns.build();\n  });\n});","require('ember-inspector/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingstxzkzjhhcjlrjnpiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfjzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACflKA;AACA;","file":"tests.js"}